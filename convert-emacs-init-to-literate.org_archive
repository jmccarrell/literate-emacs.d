#    -*- mode: org -*-


Archived entries from file /Users/jeff/jwm/proj/literate-emacs.d/convert-emacs-init-to-literate.org

* Next Up
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-02 Mon 17:40
  :ARCHIVE_FILE: /j/proj/literate-emacs.d/jeff-emacs-config.org
  :ARCHIVE_OLPATH: Working Notes/Pending Work To Do
  :ARCHIVE_CATEGORY: jeff-emacs-config
  :END:

 - [X] do I have access to Alain's config?
   - Alain M. Lafon
   - [[https://www.youtube.com/user/preek666][preek666]] on Youtube
   - I don't think so.
   - He is =munen= on github.  His literate emacs config is: https://github.com/munen/emacs.d/
   - So I do have [[file:/t/emacs-configs/munen-emacs.d/configuration.org][his config locally]]
 - add some bindings for:
   - split window
     - vertically
     - horizontally
 - or maybe work on shell mode?!
   - Explore the three shell modes in the play emacs like an instrument video ([[file:///Users/jeff/Downloads/emacs-videos/Play Emacs like an instrument.mp4][local copy]])
     - it looks like Alain was using eshell mostly
   - and there is Howards Introcution to Eshell ([[file:/Users/jeff/Downloads/emacs-videos/Introduction%20to%20EShell.mp4][local copy]])
     - and the [[http://www.howardism.org/Technical/Emacs/eshell-present.html][notes to the talk]]
 - switch to counsel and see if I prefer it to helm?
   - that might also enable tramp mode, which I would like to get done
 - explore winner mode to manipulate a stack of window configurations
 - explore undo-tree
 - explore the limits of dired mode
   - learn to make new directories
   - move files around within those directories

* Done
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-02 Mon 17:40
  :ARCHIVE_FILE: /j/proj/literate-emacs.d/jeff-emacs-config.org
  :ARCHIVE_OLPATH: Working Notes/Pending Work To Do/Cleanup
  :ARCHIVE_CATEGORY: jeff-emacs-config
  :END:

 - [X] rm .emacs.jwm.d
   - vega
   - sift mac
 - [X] git rm the classic config from jwm-dotfiles
 - [X] fix diff-dot-files to use the literate emacs config

* Done
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-02 Mon 17:40
  :ARCHIVE_FILE: /j/proj/literate-emacs.d/jeff-emacs-config.org
  :ARCHIVE_OLPATH: Working Notes/Pending Work To Do
  :ARCHIVE_CATEGORY: jeff-emacs-config
  :END:

 - [X] investigate helm-occur as a replacement for isearch and/or swiper
   - no, I decided to use =swiper= for =C-s=
 - [X] =exec-path-from-shell=
   - evaluated, and I am not going to use this at this time.
 - [X] consider moving my old revert-buffer binding from =C-x y= to =C-c u= per Daniel
 - [X] consider setting up abo-abo's ace-window
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Ace%20Window][Daniels use of it]]
 - [X] [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*json-mode][json-mode]]
 - [X] Daniels [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Org%20babel%20languages][org-babel config]] looks good for my use case
   - [X] and this [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Org%20templates][org-structure-template-alist stuff]]
   - well I didn't actually do the alist stuff, but good enough for now.

* Done or Otherwise Completed
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-02 Mon 17:40
  :ARCHIVE_FILE: /j/proj/literate-emacs.d/jeff-emacs-config.org
  :ARCHIVE_OLPATH: Working Notes/Install Essential Packages/Tier 2: Maybe, Consider These
  :ARCHIVE_CATEGORY: jeff-emacs-config
  :END:

 - [X] Consider swapping out my default emacs config for this new one.
 - [X] Turn off all disabled emacs commands; follow Howards config there.

 - NO NOT NEEDED company
   - do I use this now?  I am not really sure
   - is this compatible with ivy, swiper, counsel?
   - I don't think so.
   - I think company and counsel are both completion frameworks

 - [X] babel
   - enough to support shell
   - and particularly iterating on jq recipes
   - from Daniel Mai

 - [X] js2-mode
 - [X] json-mode
 - terraform-mode

 - [X] crux
   - which of these functions do I actually use?
     - rename buffer and file every once in a while
   - yes, probably add this back in

 - expand-region

* Tier 3: Drop These in this Refactor
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-02 Mon 17:41
  :ARCHIVE_FILE: /j/proj/literate-emacs.d/jeff-emacs-config.org
  :ARCHIVE_OLPATH: Working Notes/Install Essential Packages
  :ARCHIVE_CATEGORY: jeff-emacs-config
  :END:
** not used enough

   - key-chord
   - macro-step
   - rbenv
   - robe
   - scala-mode
   - winner
     - replace with eyebrowse?

** packages I never use

   - bats-mode
   - bookmark
   - psession
     - https://github.com/thierryvolpiatto/psession
   - try
   - wgrep
   - yasnippet
   - ztree

* Goals Achieived
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-02 Mon 17:41
  :ARCHIVE_FILE: /j/proj/literate-emacs.d/jeff-emacs-config.org
  :ARCHIVE_OLPATH: Working Notes/To Be Done/Goals to Achieve
  :ARCHIVE_CATEGORY: jeff-emacs-config
  :END:

 - [X] how to use projectile to navigate between projects as I so often want to do
   - between notes and work projects specifically
 - [X] create support for bash execution in org babel sections
   - ie literate programming using bash at the shell

* DONE explore a window configuration manager
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-02 Mon 21:50
  :ARCHIVE_FILE: /j/proj/literate-emacs.d/jeff-emacs-config.org
  :ARCHIVE_OLPATH: Working Notes/Pending Work To Do
  :ARCHIVE_CATEGORY: jeff-emacs-config
  :ARCHIVE_TODO: DONE
  :END:
  - State "DONE"       from "DOING"      [2019-09-02 Mon 21:18]
  - State "DOING"      from              [2019-09-02 Mon 20:52]

  - reddit topic: [[https://www.reddit.com/r/emacs/comments/akykio/looking_for_a_window_resizing_package_suggestion/][suggestions for a window resizer]]
    - mentions:
      - ivy-push-view
      - golden ratio
      - Zoom
      - HyControl
        - [[https://www.youtube.com/watch?v=M3-aMh1ccJk][video from the author]]  ([[file:~/Downloads/emacs-videos/GNU%20Hyperbole%20-%20HyControl,%20the%20fast%20frame%20and%20window%20manager%20for%20GNU%20Emacs.mp4][local copy]])
  - winner is built in apparently
  - what is [[https://github.com/wasamasa/eyebrowse][eyebrowse]]?
    - provides bindings to window configurations
  - what does Zamansky use?
    - he has a video on eyebrowse

  Ok, I setup eyebrowse.

* DONE explore using PCRE regexp patterns across emacs
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-09-11 Wed 22:48
  :ARCHIVE_FILE: /j/proj/literate-emacs.d/jeff-emacs-config.org
  :ARCHIVE_OLPATH: Working Notes/Pending Work To Do
  :ARCHIVE_CATEGORY: jeff-emacs-config
  :ARCHIVE_TODO: DONE
  :END:

  - State "DONE"       from              [2019-09-11 Wed 22:48]
  this seems like a win to me; only one regex syntax to remember.
  - package: pcre2el

  But this package has not been updated since 2016.

  And its author recommends [[https://github.com/joddie/pcre2el#soapbox][learning emacs regexp syntax]].

  So pass on this package.

* DONE preliminaries
  :PROPERTIES:
  :ARCHIVE_TIME: 2020-02-01 Sat 18:28
  :ARCHIVE_FILE: ~/jwm/proj/literate-emacs.d/convert-emacs-init-to-literate.org
  :ARCHIVE_CATEGORY: convert-emacs-init-to-literate
  :ARCHIVE_TODO: DONE
  :END:
    - State "DONE"       from "DOING"      [2019-07-30 Tue 20:41]
    - State "DOING"      from "DONE"       [2019-07-30 Tue 17:48]
    - State "DONE"       from "DOING"      [2019-07-26 Fri 08:33]
    - State "DOING"      from              [2019-07-21 Sun 12:59]
- what method should I use to publish the compile init file into my home directory?
** DONE REJECTED symlink to .emacs.d
     - State "DONE"       from              [2019-07-21 Sun 12:30]
how many other top level emacs directories do I have now?
#+BEGIN_SRC bash
‚ùØ print -l ~/.emacs.jwm.d/**/*(.)
/Users/jeff/.emacs.jwm.d/elisp/c-m-supl.el
/Users/jeff/.emacs.jwm.d/elisp/jc_ctags.el
/Users/jeff/.emacs.jwm.d/elisp/jc_misc.el
/Users/jeff/.emacs.jwm.d/elisp/ps-ccrypt.el
/Users/jeff/.emacs.jwm.d/emacs-custom-23.el
/Users/jeff/.emacs.jwm.d/emacs-custom-24.el
/Users/jeff/.emacs.jwm.d/emacs-custom-future.el
#+END_SRC
I can just group all of that source code into my single literate file.

- is this a new gh repo?  A: no.  Put it in jeff-dotfiles
** DEFERRED move jeff-dotfiles to github from bitbucket
     - State "DEFERRED"   from              [2019-07-21 Sun 12:30] \\
       I don't need to do this now; instead, create a separate emacs repo.
[these notes](https://gist.github.com/mandiwise/5954bbb2e95c011885ff) suggest that there is a githum import tool.
check it out.
2FA did not work with that tool.
This still makes sense for my dot files, to move them out of bitbucket
I can move them around by configuring additional git remotes and syncing them that way.
** DONE git clone it in place
     - State "DONE"       from "DOING"      [2019-07-21 Sun 12:59]
     - State "DOING"      from              [2019-07-21 Sun 12:33]
Like [[https://github.com/munen/emacs.d/#installation][munen does]]
So create a new repo at github named emacs-d
and undo the mechanism I have now to replace?  move?  the .emacs.d directory
and .emacs.jwm.d
** DONE plan the transition
     - State "DONE"       from "DOING"      [2019-07-21 Sun 15:28]
     - State "DOING"      from              [2019-07-21 Sun 12:59]
how do I evolve my current config into a literate form while not screwing up my working emacs?
A1: git branches
Just build the new config on a git branch.
Start the master with the git config at: jwm-dotfiles/.emacs.d and .emacs.jwm.d
But that suggests that I collapse the .emacs.jwm.d functions into the main init.el first.
- [X] So evaluate if I need any of those older functions.
choose to move the .emacs.d in and out of the home directory to facilitate working the transition.
- [X] write 2 shell scripts to make it easier to rotate between configurations
  - prefer-literate-emacs-config
  - prefer-classic-emacs-config
** DONE figure out how to tangle init.el from the org file
     - State "DONE"       from              [2019-07-21 Sun 16:12]
munen: Alain doesn't do any tangling of the org file into the init.el file;
he just [[babel org version ][loads in the org file using org-babel-load-file]]
check out SriPscl
he does [[Alain doesn't do any tangling of the org file into the init.el file;%0Ahe just %5B%5Bbabel org version %5D%5Bloads in the org file using org-babel-load-file%5D%5D%0A][much the same as munen]]
seems like this is a way to get bootstrapped here.
what does Howard Abrams do?
Howard has split out his org file into many individual file and has a [[file:/t/emacs-configs/howardabrams-dot-files/build.el::(defun%20ha/build-dot-files%20()][build script (written in elisp)]]
what does Sacha do?
#+BEGIN_QUOTE
My =~/.emacs.d/init.el= is now a symlink to =Sacha.el=, which is what
=M-x org-babel-tangle= (=C-c C-v t=) produces.
#+END_QUOTE
So Sacha writes her changes to =Sacha.el=, then tangles it, then revision controls the pair of files.
She also splits out each elisp into a separate buffer with =C-c '=
then she can run the debugger or eval buffer
----
Decision: I am going to follow Sacha's pattern, with one org file that I explicitly tangle
** DONE read the [[https://orgmode.org/worg/org-contrib/babel/intro.html][org babel introducton]] for context
     - State "DONE"       from "DOING"      [2019-07-30 Tue 20:37]
     - State "DOING"      from              [2019-07-26 Fri 08:51]
no, skip that intro; it appears to be quite out of date.
it refers to a variable? ~org-babel-interpreters~ which doesn't exist in my emacs.
- [X] So read Working with source code in the [[https://orgmode.org/orgguide.pdf][guide]] instead
*** DONE structure of a block
     - State "DONE"       from              [2019-07-30 Tue 20:37]
#+BEGIN_EXAMPLE

#+NAME: <name>
#+BEGIN_SRC <language> <switches> <header arguments>
  <body>
#+END_SRC

#+END_EXAMPLE
switches: control the export of the block
header args: control many aspects of the code block behavior
*** DONE editing blocks
     - State "DONE"       from              [2019-07-30 Tue 20:37]
Use C-c ' to enter and exit an evaluation buffer for that block

*** DONE evaluating code blocks
     - State "DONE"       from              [2019-07-30 Tue 20:37]
Use C-c C-c in the block to evaluate it and insert its results in the emacs buffer.
By default, only ~emacs-lisp~ is supported; other languages must be explicitly turned on.
See the manual.  (where?)

#+BEGIN_SRC emacs-lisp
(+ 45 6)
#+END_SRC

#+RESULTS:
: 51

another example

#+name: echo
#+begin_src emacs-lisp :var input="echo'd"
input
#+end_src

#+RESULTS: echo
: echo'd

*** DONE zsh block examples
     - State "DONE"       from              [2019-07-30 Tue 20:37]
According to [[https://orgmode.org/manual/Languages.html#Languages][the manual]], this function will enable babel support for added languages

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))
#+END_SRC

#+RESULTS:

Ok, that worked.  So now try to execute some shell
#+BEGIN_SRC shell
awk '{print $2}' <<=eod
every good boy
does fine
eod
#+END_SRC

#+RESULTS:
| good |
| fine |
|      |

Ok, now figure out how to name which shell is invoked
#+BEGIN_SRC shell
sh_pid=$(echo "$$")
ps uww $sh_pid
#+END_SRC

#+RESULTS:
| USER |  PID | %CPU | %MEM |     VSZ |  RSS | TT | STAT | STARTED |    TIME | COMMAND            |
| jeff | 6668 |  0.2 |  0.0 | 4308668 | 1840 | ?? | S    | 8:27PM  | 0:00.03 | /usr/local/bin/zsh |

good it is my shell; zsh

count how many lines are given to the input from a here document
#+BEGIN_SRC shell
  wc <<=eod
  every good boy
  does fine
  eod
#+END_SRC

#+RESULTS:
: 2       6      28

*** DONE read org mode [[https://orgmode.org/manual/Literal-examples.html][support for code blocks]]
      - State "DONE"       from "DOING"      [2019-07-30 Tue 20:39]
      - State "DOING"      from              [2019-07-26 Fri 08:52]
the [[https://orgmode.org/worg/library-of-babel.org][library of babel source]] is a good example of org blocks with emacs-lisp to pattern after
*** DONE read Org mode [[https://orgmode.org/manual/Literal-examples.html][literal examples]]
      - State "DONE"       from "DOING"      [2019-07-30 Tue 20:41]
      - State "DOING"      from              [2019-07-28 Sun 15:05]
Looks like [[https://orgmode.org/manual/Easy-templates.html#Easy-templates][easy templates]] have what I want for expanding blocks of examples, especailly shell code
#+BEGIN_EXAMPLE
< - e  expands to BEGIN_EXAMPLE
#+END_EXAMPLE
and editing in those source blocks with ~C-c '~ is explicitly supported.
#+BEGIN_SRC emacs-lisp
  (defun xor (a b)
         (if (a
              a
              ! b)))
#+END_SRC
this example is not valid emacs-lisp

Archived entries from file /Users/jeff/jwm/proj/literate-emacs.d/convert-emacs-init-to-literate.org

* DONE start writing my updated config
  :PROPERTIES:
  :ARCHIVE_TIME: 2020-02-01 Sat 18:29
  :ARCHIVE_FILE: ~/jwm/proj/literate-emacs.d/convert-emacs-init-to-literate.org
  :ARCHIVE_CATEGORY: convert-emacs-init-to-literate
  :ARCHIVE_TODO: DONE
  :END:
  - State "DONE"       from "DOING"      [2020-02-01 Sat 18:29]
  - State "DOING"      from "TODO"       [2019-07-30 Tue 23:34]
** DONE write the first version and figure out how to get emacs to execute it
   - State "DONE"       from              [2019-07-30 Tue 23:30]

start with the basics
- figure out how to make the most basic, valid emacs config initialization file
- and test it
  - test the init fragments inside each block with =C-c '= and =eval-buffer=
  - then tangle and
    - =emacs -Q -l init.el=
*** how does Sacha tangle her file?
She names the output file in a file-scoped property, then runs =C-c C-v t= to generate that output.

* DONE Initial Goals [4/4]
  :PROPERTIES:
  :ARCHIVE_TIME: 2020-02-01 Sat 18:31
  :ARCHIVE_FILE: ~/jwm/proj/literate-emacs.d/convert-emacs-init-to-literate.org
  :ARCHIVE_CATEGORY: convert-emacs-init-to-literate
  :ARCHIVE_TODO: DONE
  :END:
  - State "DONE"       from              [2020-02-01 Sat 18:27]
- [X] switch to a literate construction method for emacs
- [X] prefer ivy, counsle and swiper over helm
- [X] my color scheme applies to new frames; while the global color scheme applies to the startup frame. fix this?
- [X] remove unnecessary :ensure t blocks in my use-package uses

* DONE literate emacs config: finish moving the working items to convert-emacs-init-to-literate.org
  :PROPERTIES:
  :ARCHIVE_TIME: 2020-02-01 Sat 18:36
  :ARCHIVE_FILE: ~/jwm/proj/literate-emacs.d/convert-emacs-init-to-literate.org
  :ARCHIVE_OLPATH: Tasks
  :ARCHIVE_CATEGORY: convert-emacs-init-to-literate
  :ARCHIVE_TODO: DONE
  :END:
   - State "DONE"       from "NEXT"       [2020-02-01 Sat 18:36]
   - State "NEXT"       from "TODO"       [2020-02-01 Sat 18:25]
  <2020-02-01 Sat>

- [X] and add that to an agenda file so I can search next on it.

* DONE explore smex
  :PROPERTIES:
  :ARCHIVE_TIME: 2020-02-01 Sat 18:44
  :ARCHIVE_FILE: ~/jwm/proj/literate-emacs.d/convert-emacs-init-to-literate.org
  :ARCHIVE_OLPATH: Working Notes/Pending Work To Do/Next Up
  :ARCHIVE_CATEGORY: convert-emacs-init-to-literate
  :ARCHIVE_TODO: DONE
  :END:
  - State "DONE"       from "TODO"       [2019-09-09 Mon 07:55]

  - [X] read the smex docs
    - [[http://github.com/nonsequitur/smex/blob/master/README.markdown][github README]]
    > Smex is a M-x enhancement for Emacs. Built on top of Ido, it provides a convenient interface to your
    recently and most frequently used commands. And to all the other commands, too.
  - [X] does abo-abo use smex in his configuration?
    - A: [[file:/t/emacs-configs/abo-abo-dotemacs/init.el::(let%20((file-name-handler-alist%20nil))%20(require%20'eclipse-theme)%20(load-theme%20'eclipse%20t)%20(require%20'use-package)%20(require%20'smex))][he loads it]], but doesn't appear to configure it
  - so I don't think smex is going to work for me with counsel
  - there is helm-smex though, so I could have smex if I went back to helm it appears

* DONE do I use ido?  or just ivy, counsel and swiper
  :PROPERTIES:
  :ARCHIVE_TIME: 2020-02-01 Sat 18:53
  :ARCHIVE_FILE: ~/jwm/proj/literate-emacs.d/convert-emacs-init-to-literate.org
  :ARCHIVE_OLPATH: Open Questions
  :ARCHIVE_CATEGORY: convert-emacs-init-to-literate
  :ARCHIVE_TODO: DONE
  :END:
   - State "DONE"       from "DOING"      [2020-02-01 Sat 18:53]
     - State "DOING"      from              [2019-07-21 Sun 12:59]
- arguments in favor of ido
  - I believe Sacha uses it
  - [[https://github.com/munen/emacs.d/#where-ivy-doesnt-work-well][where ivy doesn't work well]]

For now, I am going to stick with counsel and swiper.

