#+TITLE: Reconstruct my emacs init file in the Literate style
#+author: Jeff McCarrell
#+date: 2020:03:09

* Working Notes
** Goals to Achieve

   - [ ] enable tramp mode
     - show it works in important cases, like judgy
     - to get there, I need:
       - [X] eshell mode that works?
   - [ ] to support jq literate programming to solve some of the salt challenges I have at work
   - [ ] can install from a new, clean .emacs.d
     - what does this mean?  I am not really sure.

** Next Up
*** NEXT Add useful projectile key sequences to my frequently used emacs cheat sheet
  <2020-04-05 Sun>
*** setup occur and how it works with swiper [50%]
    - [ ] watch the [[https://protesilaos.com/codelog/2019-08-04-emacs-occur/][Protesilaos video on occur]]
    - [X] read the [[info:emacs#Other%20Repeating%20Search][occur docs]]

    it doesn't seem to work well with swiper?
*** TODO explore [[https://www.gnu.org/software/emacs/manual/html_node/dired-x/Find-File-At-Point.html#Find-File-At-Point][find file at point]]
    - State "DOING"      from              [2019-09-11 Wed 22:49]

    In particular, I would like to be able to find file at point in a given window using =ace-window=

    There is find-file-in-project, which is closely related to ivy.

*** TODO add support for emojis inside emacs on os x
  <2020-03-29 Sun>

  copy what Daniel Mai has apparently done in his config: [[file:~/thirdparty/emacs-configs/danielmai-dotemacs/config.org::*Font][Font]]

*** edit filenames inline

    - edit dired inline
    - use =C-x C-q= to edit a filename inline
    - it looks like this is a function provided by dired+, not in stock dired.
    - and with =mc= mark all, one can edit multiple filenames at once.

*** explore tramp

    - my tramp notes
    - [[info:ivy#Using%20TRAMP][ivy info on using tramp]]

*** General

    - figure out how to get bookmarks? to open file: references in org files defined by org-store-link
    - Find a mechanism to apply configurations to a set of file identified by a predicate
      - eg a way to specify a specific code formatting policy to work vs personal files
      - ask in reddit?

*** From Howard

    - use [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::(use-package%20whitespace%20:bind%20("C-c%20T%20w"%20.%20whitespace-mode)][Howards whitespace mode]]
    - experiment with [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::(use-package%20fill%20:bind%20(("C-c%20T%20f"%20.%20auto-fill-mode)][Howards fill-mode]]
    - I think I want [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::Unfilling%20a%20paragraph%20joins%20all%20the%20lines%20in%20a%20paragraph%20into%20a%20single%20line.%20Taken%20from%20%5B%5Bhttp://www.emacswiki.org/UnfillParagraph%5D%5Bhere%5D%5D.][unfill paragraph]]
    - [[file:/t/emacs-configs/howardabrams-dot-files/emacs-fixes.org::I%20rarely%20want%20to%20kill%20any%20buffer%20but%20the%20one%20I'm%20looking%20at.%20#+BEGIN_SRC%20elisp%20(global-set-key%20(kbd%20"C-x%20k")%20'kill-this-buffer)%20(global-set-key%20(kbd%20"C-x%20K")%20'kill-buffer)%20#+END_SRC][kill this buffer]]
    - adopt Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::*Dash][interface to dash]]

**** maybe explore these

     Howard has a bunch of _Technical Artifacts_ sections

     - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-fixes.org::*Technical%20Artifacts][emacs-fixes]]
     - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Technical%20Artifacts][emacs.org]]
     - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::*Technical%20Artifacts][emacs-mac.org]]

     Consider reading these for the insights they may contain

     Howard has a bunch of [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Font%20Settings][font choices]]. But I don't know how he possibly installs these fonts. So stick with
     Monaco for the short term. Well, now I know a bit more about installing fonts. At least, installing
     Hack.

     Here is where [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::(if%20(eq%20system-type%20'darwin)%20(require%20'init-mac)%20(require%20'init-linux))][Howard chooses between his mac and linux configurations]]

*** From Daniel Mai

   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*C/Java][more sane C/java brace handling via Daniel]]
   - figure out how to get bookmarks? to open file: references in org files defined by org-store-link
   - Daniel has some interesting [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Open%20other%20apps%20from%20Emacs][open in other apps functions]] I would like to investigate as well
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*List%20buffers][ibuffer?]]
   - investigate package recentf
   - Daniel has a nice example [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Installation][passing an emacs-lisp variable into a shell]] buffer to execute
     - and a [[file:/t/emacs-configs/danielmai-dotemacs/config.org::#+begin_src%20emacs-lisp%20(use-package%20exec-path-from-shell%20:ensure%20t%20:init%20(exec-path-from-shell-initialize))%20#+end_src][link to an info buffer in emacs]]
   - consider creating an auth-source thing as [[file:/t/emacs-configs/danielmai-dotemacs/config.org::(use-package%20auth-source%20:config%20(customize-set-variable%20'auth-sources%20'((:source%20"~/.authinfo.gpg"))))][Daniel]] and IIRC jwiegley do
   - Daniel uses
     - helm
     - and ivy, swiper, counsel
     - and avy
   - Daniels config for [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Multiple%20cursors][multiple cursors]]
   - Figure out why [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Yasnippet][Daniel likes yasnippets]]
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*terminal-here][terminal here?]]
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*go-mode][Daniel's go-mode]]
   - here is how Daniel distinguishes between packages he gets from elpa vs [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Non-ELPA%20packages][local site-lisp]]
   - how Daniel starts [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Emacsclient][emacs server for emacsclient]]
*** DEFERRED explore dired mode
    - State "DEFERRED"   from "DOING"      [2020-03-29 Sun 17:03] \\
      I think my use of dired is ok now.  Moving this down in priority.
    - State "DOING"      from "TODO"       [2019-09-09 Mon 08:11]

    - [X] read the *Help* for dired
    - [X] Zamansky videos
      - [X] Using emacs 38 - dired
        - [[/Users/jeff/Downloads/emacs-videos/Using%20Emacs%2038%20-%20Dired.mp4][local copy]]
        - and the [[https://cestlaz.github.io/posts/using-emacs-38-dired/][blog entry]] which has interesting links by abo-abo and jcs
      - [X] Using emacs 57 - dired narrow
        - [[/Users/jeff/Downloads/emacs-videos/Using%20Emacs%20Episode%2057%20-%20dired-narrow.mp4][local copy]]
    - [X] what does dired+ add to the picture?
      - [X] read the dired+ docs
      - A: IDK; I couldn't find a package =dired+=

*** CANCELLED consider re-adding try to emacs
    - State "CANCELLED"  from              [2020-03-29 Sun 21:25] \\
      not going to do this.

**** DONE investigate dired-x
     - State "DONE"       from "DOING"      [2019-09-11 Wed 21:27]
     - State "DOING"      from              [2019-09-11 Wed 08:07]
    - [ ] read the manual [[info:dired-x#Top][Dired Extra]]
      - [ ] do any of the emacs folks I follow use dired-x?  A: yes they do.

      #+BEGIN_SRC shell :results output
      find /t/emacs-configs -type f -name \*.el -maxdepth 4 | xargs fgrep -l dired-x
      #+END_SRC

      #+RESULTS:
      : /t/emacs-configs/bbatsov-dotemacs/init.el
      : /t/emacs-configs/jwiegley-dotemacs/init.el
      : /t/emacs-configs/prelude/core/prelude-editor.el
      : /t/emacs-configs/prelude/elpa/async-20170610.2241/dired-async.el
      : /t/emacs-configs/prelude/elpa/magit-20170709.1106/magit.el
      : /t/emacs-configs/prelude/elpa/magit-20170709.1106/magit-diff.el
      : /t/emacs-configs/prelude/elpa/helm-20170709.1054/helm-files.el
      : /t/emacs-configs/abo-abo-dotemacs/modes/ora-dired.el
      : /t/emacs-configs/abo-abo-dotemacs/init.el

      - bbatsov has a nice config

        #+BEGIN_SRC emacs-lisp :tangle no
          (use-package dired
            :config
            ;; dired - reuse current buffer by pressing 'a'
            (put 'dired-find-alternate-file 'disabled nil)

            ;; always delete and copy recursively
            (setq dired-recursive-deletes 'always)
            (setq dired-recursive-copies 'always)

            ;; if there is a dired buffer displayed in the next window, use its
            ;; current subdir, instead of the current subdir of this dired buffer
            (setq dired-dwim-target t)

            ;; enable some really cool extensions like C-x C-j(dired-jump)
            (require 'dired-x))
        #+END_SRC
      - abo-abo has an involved config
      - and a simple one
        #+BEGIN_SRC emacs-lisp :tangle no
          (use-package dired
            :commands dired
            :init
            (setq dired-listing-switches
                  (if (memq system-type '(windows-nt darwin))
                      "-alh"
                      "-laGh1v --group-directories-first")))
          (use-package dired-x
            :commands dired-jump)
        #+END_SRC

    - I definitely want [[info:dired-x#Miscellaneous%20Commands][=dired-jump= and =dired-dump-other-window=]]
    - here is [[info:dired-x#Special%20Marking%20Function][how to write elisp to mark files]] in dired buffer
    - I think I do not want the [[info:dired-x#Find%20File%20At%20Point][=dired-x-find-file=]] stuff

**** DONE read about how abo-abo uses dired

     - State "DONE"       from "DOING"      [2019-09-11 Wed 21:27]
     - State "DOING"      from              [2019-09-11 Wed 08:07]
     - [X] read [[https://oremacs.com/2017/11/18/dired-occur/][abo-abo dired article]]
     - [X] a [[https://oremacs.com/2015/01/10/dired-ansi-term/][2015 article about how he uses ansi-term and dired]]
       - some good stuff about =C-x C-j= and invoking a shell at point, including using tramp to ssh to remote files
     - [X] [[https://oremacs.com/2015/01/12/dired-file-size/][file sizes in dired]]
     - [X] more discussion of [[https://oremacs.com/2015/01/13/dired-options/][his dired switches]]

**** other dired investigations
     - State "NEXT"       from "DOING"      [2020-02-01 Sat 19:00]
     - State "DOING"      from              [2019-09-30 Mon 11:56]
     - [X] read [[http://irreal.org/blog/?p=6760][jcs dired article]]
       - but apparently I need ivy-occur to make this all work?
     - [ ] read about dired-narrow
       - [ ] the full docs are in [[https://github.com/Fuco1/dired-hacks][dired-hacks]]
     - [ ] learn to make new directories?
     - [ ] move files around within those directories

**** notes

     - One can mark based on regex
     - and invert the selection
       - ie mark all .jpeg files
       - then mark all files in the directory that are not .jpeg files
*** DONE switch to counsel, counsel-projectile [100%]
    - State "DONE"       from "DOING"      [2020-03-29 Sun 21:05]
    - State "DOING"      from              [2019-09-02 Mon 21:50]

    - [X] enable the config
    - [X] make a table of common keybindings that I would want to use.
      - publish it in the [[file:jeff-emacs-config.org::*Projectile%20Config][counsel section]] so I can link to it on the web
    - [X] Read [[https://github.com/ericdanan/counsel-projectile][the docs]] to get the basic key bindings down.
    - [X] set up counsel-rg to use ripgrep on vega and sift mac
      - [X] on vega
      - [X] on sift mac

**** DEFERRED investigate ivy-push-view
     - State "DEFERRED"   from "DOING"      [2020-03-29 Sun 17:04] \\
       interesting, but not right now.
     - State "DOING"      from              [2019-09-02 Mon 20:52]

     [[file:~/.emacs.d/elpa/ivy-20190803.1121/ivy.el::(defun%20ivy-push-view%20(&optional%20arg)][ivy-push-view]] appears to have some basic window layout capture functionality.  And since I am wanting
     to try the whole ivy/counsel combo in preference to helm, lets just do that and try out ivy-push-view
     as part of that refactoring.

*** DONE make a links section to my favorite authors' config files
    - State "DONE"       from              [2020-03-29 Sun 17:05]
    - both on the web and to my local copies

*** DONE figure out how to search at point with swiper
    - State "DONE"       from "DOING"      [2020-03-29 Sun 14:11]
    - State "DOING"      from              [2020-03-15 Sun 20:49]

    the answer here is ~M-j~, which is ~ivy-yank-word~.

    I often want to search for the text at point with swiper
    Like I used to do with i-search

    I'm sure this is possible; I just don't know how to do it.

    the method is: =swiper-thing-at-point=

    is there a binding for it?  A: no.

    I can also yank text into the ivy completion buffer.

    Looks like the magic is =M-j= bound to =ivy-yank-word=

    the key bindings are displayed by
    #+begin_quote
    M-x describe-function ivy-mode
    #+end_quote

    reddit thread about [[https://www.reddit.com/r/emacs/comments/6yi6dl/most_useful_parts_of_ivycounselswiper_manual_too/][most useful parts of ivy]]
*** DONE add a key-binding C-c ~ to insert ~~ pairs

    - State "DONE"       from "DOING"      [2020-03-29 Sun 14:04]
**** DONE explore =wrap-region=
     - State "DONE"       from "DOING"      [2020-03-29 Sun 14:04]
     - State "DOING"      from              [2020-03-29 Sun 13:21]

     Added the below config; lets see how I like it.

     It looks like Howard has [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#block-wrappers][started using =wrap-region=]].

     And I like his keyboard mapping to add pairs of characters with meta bindings:

     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "M-[") 'insert-pair)
       (global-set-key (kbd "M-{") 'insert-pair)
       (global-set-key (kbd "M-<") 'insert-pair)
       (global-set-key (kbd "M-'") 'insert-pair)
       (global-set-key (kbd "M-`") 'insert-pair)
       (global-set-key (kbd "M-\"") 'insert-pair)
     #+END_SRC

     So see if I can't just follow that pattern and ease my code editing in org-mode particularly.

**** DONE bind-key vs define-key
     - State "DONE"       from "DOING"      [2020-03-29 Sun 14:04]
     - State "DOING"      from "DONE"       [2020-02-03 Mon 13:38]
     - State "DONE"       from "NEXT"       [2020-02-03 Mon 13:24]
     - State "NEXT"       from              [2020-02-03 Mon 13:18]

     Howard uses ~bind-key~ in his definitions.

     However, the emacs manual [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Key-Bindings.html#Changing-Key-Bindings][changing key bindings]] does not mention bind-key, instead uses define-key.  Why?

     Well, it looks like `bind-key` is a use-package level macro with different evaluation implications.

     Here is the full snippet that Howard uses to [[file:~/thirdparty/emacs-configs/howardabrams-dot-files/emacs-org.org::*Local%20Key%20Bindings][define some of his org mode keys]]:

     #+BEGIN_SRC elisp
       (use-package org
         :config
          (bind-keys :map org-mode-map
          ("A-b" . (surround-text-with "+"))
          ("s-b" . (surround-text-with "*"))
          ("A-i" . (surround-text-with "/"))
          ("s-i" . (surround-text-with "/"))
          ("A-=" . (surround-text-with "="))
          ("s-=" . (surround-text-with "="))
          ("A-`" . (surround-text-with "~"))
          ("s-`" . (surround-text-with "~"))

          ("C-s-f" . forward-sentence)
          ("C-s-b" . backward-sentence)))
     #+END_SRC

     however, Howard [[file:~/thirdparty/emacs-configs/howardabrams-dot-files/emacs-org.org::*Initial%20Settings][used define-key at the top of his org file as well]]:

     #+BEGIN_SRC emacs-lisp
       (define-key org-mode-map (kbd "M-C-n") 'org-end-of-item-list)
       (define-key org-mode-map (kbd "M-C-p") 'org-beginning-of-item-list)
       (define-key org-mode-map (kbd "M-C-u") 'outline-up-heading)
       (define-key org-mode-map (kbd "M-C-w") 'org-table-copy-region)
       (define-key org-mode-map (kbd "M-C-y") 'org-table-paste-rectangle)

       (define-key org-mode-map [remap org-return] (lambda () (interactive)
                                                     (if (org-in-src-block-p)
                                                         (org-return)
                                                       (org-return-indent)))))
     #+END_SRC

     so there seems to be some clear evaluation time discrimination going on here.

     hypothesis:
     - ~surround-text-with~ is not defined until initialization time
     - bind-keys defers the actual call (it is a special form) until it is evaluated at init time
       - reducing the ordering problem on which set of Howard's many init files get evaluated first
     - bind-keys calls define-key under the covers

***** CANCELLED does bind-key call define-key?

      - State "CANCELLED"  from              [2020-03-29 Sun 13:12]
      Assume the answer is yes, or that the answer does not really matter to this work.

      - [ ] read the comments / usage guide for [[https://github.com/jwiegley/use-package/blob/master/bind-key.el#L28-L33][~bind-keys~]]

**** DONE create a org-mode-map keymap?

     - State "DONE"       from "NEXT"       [2020-03-29 Sun 13:06]
     and/or investigate if I can generate an Alt or Super keyboard prefix from my mac os x keyboard.
     As described by `C-h c`:

     Cmd maps to Meta
     Option maps to Super

     So I should be able to use Howards bindings above, once I figure out how to create an org-mode-map.

     #+BEGIN_SRC emacs-lisp
       (define-key org-mode-map (kbd "s-=") 'jwm/mac-p)
     #+END_SRC

     so that does work, even though =jwm/mac-p= is not an interactive function.

**** DONE does org-mode define the symbol org-mode-map?
     - State "DONE"       from "NEXT"       [2020-03-29 Sun 13:01]
     - State "NEXT"       from              [2020-02-03 Mon 13:30]

     It certainly appears to.
     #+begin_example
       org-mode-map is a variable defined in ‘org.el’.
     #+end_example
**** DONE first attempt
     - State "DONE"       from              [2020-03-29 Sun 12:50]
    - State "DOING"      from "TODO"       [2019-05-06 Mon 08:39]
   <2018-09-13 Thu>

   or find the idiom from one my emacs dot file authors and replicate it.
   Looks like this is the idiom from howard:

   #+BEGIN_SRC text
     howardabrams-dot-files/emacs-org.org
     108:       (bind-key "A-`" (surround-text-with "~") org-mode-map)
     109:       (bind-key "s-`" (surround-text-with "~") org-mode-map))
   #+END_SRC

**** DONE find a key to bind it to
     - State "DONE"       from              [2020-03-29 Sun 12:48]

   tldr: I now have =super= bound to the mac os option key, as distinct from =meta= bound to the mac os
   =command= key.

   the problem with this is that I can't figure out how to generate a "A-" or a "s-" prefix from my mac
   keyboard the way I have it set up.

   Maybe send a message to the emacs reddit?
   Or go look at the code that implements mac key bindings for a hint.
   So Left-option is already bound to "s-".   So I am good to go there.
   It looks like Howard has set up an org-mode-map.  I should do that as well.

**** DONE what is the difference in org mode between equals, tilde and back quote?

     - State "DONE"       from              [2020-02-03 Mon 13:30]
According to the [[https://orgmode.org/guide/Markup.html][org mode markup guide]], specifically [[https://orgmode.org/guide/Emphasis-and-Monospace.html#Emphasis-and-Monospace][emphasis and monospace]],

#+BEGIN_QUOTE
You can make words ‘*bold*’, ‘/italic/’, ‘_underlined_’, ‘=verbatim=’ and ‘~code~’, and, if you must, ‘+strike-through+’. Text in the code and verbatim string is not processed for Org specific syntax; it is exported verbatim.
#+END_QUOTE

So the answer is that:
- backquote does not have any special meaning
- tilde is for code
- equals is for verbatim
*** DONE add a recent keybinding section to visible docs
    - State "DONE"       from "DOING"      [2020-03-29 Sun 12:45]
    - State "DOING"      from              [2020-03-13 Fri 08:11]
    the observation is that I often need a way to establish key combinations for recently acquired
    functionality.

    Examples:

    tangle babel
      : C-c C-v t

    yasnippet / auto-yasnippet
      : C-c & C-s   yas-insert-snippet
      : s-w         aya-create
      : s-y         aya-expand

**** use =emacs-cheat-sheet= for this task
     - [ ] refactor to put my most recently used bindings at the top
     - [ ] add a new section "new bindings to get used to"

*** DONE add support for avy
    - State "DONE"       from              [2020-03-28 Sat 21:38]
**** what do others do with avy?
     it looks like the main avy function in use is =avy-goto-char-timer=

     #+begin_example
       ❯ for d in $PWD/*(/); do (cd $d && print ${d}/ && git grep -w avy-goto-char-timer); done | pbcopy

       /Users/jeff/thirdparty/emacs-configs/abo-abo-dotemacs/
       keys.el:(global-set-key (kbd "C-'") 'avy-goto-char-timer)
       modes/ora-avy.el:  ("s" avy-goto-char-timer)

       /Users/jeff/thirdparty/emacs-configs/howardabrams-dot-files/
       emacs-evil.org:                  ("t" . avy-goto-char-timer)
       emacs-evil.org:        "j" 'avy-goto-char-timer
       emacs.org:     (global-set-key (kbd "s-h") 'avy-goto-char-timer)
       emacs.org:     (global-set-key (kbd "s-j") 'avy-goto-char-timer)
       emacs.org:     (global-set-key (kbd "A-h") 'avy-goto-char-timer)
       emacs.org:     (global-set-key (kbd "A-j") 'avy-goto-char-timer)

       /Users/jeff/thirdparty/emacs-configs/jwiegley-dotemacs/
       init.el:  :bind* ("C-." . avy-goto-char-timer)

       /Users/jeff/thirdparty/emacs-configs/steve-purcell-dotemacs/
       lisp/init-editing-utils.el:  (global-set-key (kbd "C-;") 'avy-goto-char-timer))
     #+end_example

     looks like we have 3 variants of binding it to =C-something=:
     - =C-.=
     - =C-;=
     - =C-'=

     I guess I will choose =C-.=, following jwiegley here.

     #+BEGIN_SRC emacs-lisp
       (use-package avy
         :bind* ("C-." . avy-goto-char-timer)
         :config
         (avy-setup-default))
     #+END_SRC

***** grep avy
      #+begin_example
        ❯ for d in $PWD/*(/); do (cd $d && print $(pwd) && git grep -w avy); done | pbcopy

        /Users/jeff/thirdparty/emacs-configs/abo-abo-dotemacs
        init.el:(require 'ora-avy)
        keys.el:(global-set-key (kbd "C-'") 'avy-goto-char-timer)
        keys.el:(global-set-key (kbd "π") 'avy-goto-char)                    ; [p]
        keys.el:(global-set-key (kbd "M-t") 'avy-goto-word-or-subword-1)
        keys.el:(global-set-key (kbd "M-p") 'avy-pop-mark)
        keys.el:(global-set-key (kbd "C-c C-j") 'avy-resume)
        keys.el:(global-set-key (kbd "C-π") 'avy-resume)
        keys.el:(global-set-key (kbd "M-g g") 'avy-goto-line)
        keys.el:(global-set-key (kbd "C-M-g") 'avy-goto-line)
        keys.el:(global-set-key (kbd "M-g e") 'avy-goto-word-0)
        keys.el:(global-set-key (kbd "M-g w") 'avy-goto-word-1)
        keys.el:(global-set-key (kbd "M-g s") 'avy-goto-subword-0)
        keys.el:  ("a" vimish-fold-avy "avy")
        loaddefs.el:;;;### (autoloads nil "modes/ora-avy" "modes/ora-avy.el" (0 0 0 0))
        loaddefs.el:;;; Generated autoloads from modes/ora-avy.el
        loaddefs.el:(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modes/ora-avy" '("hydra-avy")))
        modes/ora-avy.el:(avy-setup-default)
        modes/ora-avy.el:(csetq avy-all-windows t)
        modes/ora-avy.el:(csetq avy-all-windows-alt nil)
        modes/ora-avy.el:(csetq avy-styles-alist '((avy-goto-char-2 . post)
        modes/ora-avy.el:                          (ivy-avy . pre)
        modes/ora-avy.el:                          (avy-goto-line . pre)))
        modes/ora-avy.el:;; (advice-add 'swiper :before 'avy-push-mark)
        modes/ora-avy.el:;; (advice-remove 'swiper 'avy-push-mark)
        modes/ora-avy.el:(csetq avy-keys-alist
        modes/ora-avy.el:(defhydra hydra-avy (:color teal)
        modes/ora-avy.el:  ("j" avy-goto-char)
        modes/ora-avy.el:  ("k" avy-goto-word-1)
        modes/ora-avy.el:  ("l" avy-goto-line)
        modes/ora-avy.el:  ("s" avy-goto-char-timer)
        modes/ora-avy.el:(defhydra hydra-avy-cycle ()
        modes/ora-avy.el:  ("j" avy-next "next")
        modes/ora-avy.el:  ("k" avy-prev "prev")
        modes/ora-avy.el:(global-set-key (kbd "C-M-'") 'hydra-avy-cycle/body)
        modes/ora-avy.el:(provide 'ora-avy)
        modes/ora-elisp.el:    (setq lispy-avy-style-symbol 'at-full)))
        modes/ora-eww.el:(require 'avy)
        modes/ora-eww.el:  (call-interactively #'avy-goto-char)
        modes/ora-javascript.el:  (setq-local avy-subword-extra-word-chars nil)

        /Users/jeff/thirdparty/emacs-configs/andreyorst-dotfiles
        /Users/jeff/thirdparty/emacs-configs/bbatsov-dotemacs
        init.el:(use-package avy
        init.el:  :bind (("s-." . avy-goto-word-or-subword-1)
        init.el:         ("s-," . avy-goto-char))
        init.el:  (setq avy-background t))

        /Users/jeff/thirdparty/emacs-configs/danielmai-dotemacs
        config.org:   ("C-'" . ivy-avy))
        config.org:(use-package avy
        config.org:  :bind ("C-S-s" . avy-goto-char))

        /Users/jeff/thirdparty/emacs-configs/ebzzry-dotfiles
        /Users/jeff/thirdparty/emacs-configs/editorconfig-emacs
        /Users/jeff/thirdparty/emacs-configs/greendog-gtd
        /Users/jeff/thirdparty/emacs-configs/helm-ag

        /Users/jeff/thirdparty/emacs-configs/howardabrams-dot-files
        emacs-evil.org:                  ;; Wanna rebind f to avy?
        emacs-evil.org:                  ;; How about avy to 't'?
        emacs-evil.org:                  ("t" . avy-goto-char-timer)
        emacs-evil.org:                  ("T" . avy-goto-word-timer)
        emacs-evil.org:        "j" 'avy-goto-char-timer
        emacs-fixes.org:   I find it better than =avy= when in a macro.t
        emacs.org:   Mostly using the [[https://github.com/abo-abo/avy][avy]] project's [[help:avy-goto-word-timer][avy-goto-word-1]] function, so I bind
        emacs.org:     (use-package avy
        emacs.org:       :init (setq avy-background t))
        emacs.org:     (global-set-key (kbd "s-h") 'avy-goto-char-timer)
        emacs.org:     (global-set-key (kbd "s-j") 'avy-goto-char-timer)
        emacs.org:     (global-set-key (kbd "s-H") 'avy-pop-mark)
        emacs.org:     (global-set-key (kbd "s-J") 'avy-pop-mark)
        emacs.org:     (global-set-key (kbd "A-h") 'avy-goto-char-timer)
        emacs.org:     (global-set-key (kbd "A-j") 'avy-goto-char-timer)
        emacs.org:     (global-set-key (kbd "A-H") 'avy-pop-mark)
        emacs.org:     (global-set-key (kbd "A-J") 'avy-pop-mark)

        /Users/jeff/thirdparty/emacs-configs/jwiegley-dotemacs
        init.el:(use-package avy
        init.el:  :bind* ("C-." . avy-goto-char-timer)
        init.el:  (avy-setup-default))
        init.el:(use-package avy-zap
        init.el:  :bind (("M-z" . avy-zap-to-char-dwim)
        init.el:         ("M-Z" . avy-zap-up-to-char-dwim)))
        init.el:              ("C-." . swiper-avy)
        settings.el: '(avy-case-fold-search t)
        settings.el: '(avy-keys (quote (97 111 101 117 105 100 104 116 110 115)))
        settings.el: '(avy-timeout-seconds 0.3)

        /Users/jeff/thirdparty/emacs-configs/munen-emacs.d
        /Users/jeff/thirdparty/emacs-configs/prelude
        README.md:<kbd>jj</kbd>      | Jump to the beginning of a word(`avy-goto-word-1`)
        README.md:<kbd>jk</kbd>      | Jump to a character(`avy-goto-char`)
        README.md:<kbd>jl</kbd>      | Jump to the beginning of a line(`avy-goto-line`)
        core/prelude-editor.el:;; avy allows us to effectively navigate to visible things
        core/prelude-editor.el:(require 'avy)
        core/prelude-editor.el:(setq avy-background t)
        core/prelude-editor.el:(setq avy-style 'at-full)
        core/prelude-global-keybindings.el:(global-set-key (kbd "C-c j") 'avy-goto-word-or-subword-1)
        core/prelude-global-keybindings.el:(global-set-key (kbd "s-.") 'avy-goto-word-or-subword-1)
        core/prelude-packages.el:    avy
        modules/prelude-evil.el:;;; enable avy with evil-mode
        modules/prelude-evil.el:(define-key evil-normal-state-map (kbd "SPC") 'avy-goto-word-1)
        modules/prelude-key-chord.el:(key-chord-define-global "jj" 'avy-goto-word-1)
        modules/prelude-key-chord.el:(key-chord-define-global "jl" 'avy-goto-line)
        modules/prelude-key-chord.el:(key-chord-define-global "jk" 'avy-goto-char)
        sample/prelude-pinned-packages.el:        (avy . "melpa-stable")

        /Users/jeff/thirdparty/emacs-configs/sacha-chua-dotemacs
        Sacha.org:      (key-chord-define-global "jj"     'avy-goto-word-1)
        Sacha.org:      (key-chord-define-global "jl"     'avy-goto-line)
        Sacha.org:      ;(key-chord-define-global "jZ"     'avy-zap-to-char)
        Sacha.org:  (use-package avy)
        Sacha.org:(use-package avy-zap
        Sacha.org:  (("M-z" . avy-zap-up-to-char-dwim)
        Sacha.org:   ("M-Z" . avy-zap-to-char-dwim)))

        /Users/jeff/thirdparty/emacs-configs/sirpscl-emacs.d
        /Users/jeff/thirdparty/emacs-configs/smartparens

        /Users/jeff/thirdparty/emacs-configs/steve-purcell-dotemacs
        lisp/init-editing-utils.el:(when (maybe-require-package 'avy)
        lisp/init-editing-utils.el:  (global-set-key (kbd "C-;") 'avy-goto-char-timer))
      #+end_example

***** expand in org mode
      #+name: find-other-emac-users-use-of-avy
      #+BEGIN_SRC text
        for d in *(/); do
          (cd $d && print -- $(pwd) && print $d && git grep -w avy)
        done | sed 4q
      #+END_SRC

      #+BEGIN_SRC shell :dir ~/thirdparty/emacs-configs :results output :noweb yes
        zsh -f <<'EOF'
        <<find-other-emac-users-use-of-avy>>
        EOF
      #+END_SRC

      #+RESULTS:
      : /Users/jeff/thirdparty/emacs-configs/abo-abo-dotemacs
      : abo-abo-dotemacs
      : init.el:(require 'ora-avy)
      : keys.el:(global-set-key (kbd "C-'") 'avy-goto-char-timer)

      will bash work with that example as well?

      #+BEGIN_SRC shell :dir ~/thirdparty/emacs-configs :results output :noweb yes
        bash <<'EOF'
        <<find-other-emac-users-use-of-avy>>
        EOF
      #+END_SRC

      #+RESULTS:

      A: no, the result is:
      #+begin_example
        bash: line 1: syntax error near unexpected token `('
        bash: line 1: `for d in *(/); do'
      #+end_example

****** literal expansion
      #+BEGIN_SRC shell :dir /Users/jeff/thirdparty/emacs-configs :results output
        zsh -f <<'EOF'
        for d in $(print *(/)); do
          (cd $d && print -- $(pwd) && print $d && git grep -w avy)
        done | sed 10q
        EOF

      #+END_SRC

      #+RESULTS:
      #+begin_example
      /Users/jeff/thirdparty/emacs-configs/abo-abo-dotemacs
      abo-abo-dotemacs
      init.el:(require 'ora-avy)
      keys.el:(global-set-key (kbd "C-'") 'avy-goto-char-timer)
      keys.el:(global-set-key (kbd "π") 'avy-goto-char)                    ; [p]
      keys.el:(global-set-key (kbd "M-t") 'avy-goto-word-or-subword-1)
      keys.el:(global-set-key (kbd "M-p") 'avy-pop-mark)
      keys.el:(global-set-key (kbd "C-c C-j") 'avy-resume)
      keys.el:(global-set-key (kbd "C-π") 'avy-resume)
      keys.el:(global-set-key (kbd "M-g g") 'avy-goto-line)
      #+end_example

*** DONE build a better emacs / python working env
    - State "DONE"       from "TODO"       [2020-03-14 Sat 14:42]
   <2020-03-14 Sat>

 Mike Z uses the inferior python process =C-c C-p= to test his python code
 the binding in elpy is =C-c C-z=
 Much like my use of the terminal

 The interaction with virtualenv/pipenv makes thats style hard for me?
 A: elpy has explicit support for virtual envs via =pyvenv=

**** DONE inferior python usage

     - State "DONE"       from              [2020-03-14 Sat 14:42]
 answer: re-installing brew python3, and configuring emacs to prefer python3 works here.

***** DONE working notes
      - State "DONE"       from              [2020-03-14 Sat 13:33]
 start in ~/tmp/foo.py

 here is what i get:
 #+begin_quote
 Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to support readline, yet ‘python-shell-completion-native-enable’ was t and "python" is not part of the ‘python-shell-completion-native-disabled-interpreters’ list.  Native completions have been disabled locally.
 #+end_quote

 what is my current python setup? nil

 - [X] So try out the generic elpy install
 and try inferior python again:

 same result

 #+begin_quote
 Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to support readline, yet ‘python-shell-completion-native-enable’ was t and "python" is not part of the ‘python-shell-completion-native-disabled-interpreters’ list.  Native completions have been disabled locally.
 #+end_quote

 So try generic elpy configuration,
 ie, emacs menu -> elpy -> config
 then I see:

 #+begin_quote
 Elpy Configuration

 Emacs.............: 26.2
 Elpy..............: 1.32.0
 Virtualenv........: None
 Interactive Python: python 2.7.16 (/usr/bin/python)
 RPC virtualenv....: rpc-venv (/Users/jeff/.emacs.d/elpy/rpc-venv)
  Python...........: python 3.7.7 (/Users/jeff/.emacs.d/elpy/rpc-venv/bin/python)
  Jedi.............: 0.16.0
  Rope.............: 0.16.0
  Autopep8.........: 1.5
  Yapf.............: 0.29.0
  Black............: 19.10b0
 Syntax checker....: Not found (flake8)

 Warnings

 You have not activated a virtual env. While Elpy supports this, it is often a good idea to work inside a
 virtual env. You can use M-x pyvenv-activate or M-x pyvenv-workon to activate a virtual env.

 The directory ~/.local/bin/ is not in your PATH. As there is no active virtualenv, installing Python
 packages locally will place executables in that directory, so Emacs won't find them. If you are missing some
 commands, do add this directory to your PATH -- and then do `elpy-rpc-restart'.

 The configured syntax checker could not be found. Elpy uses this program to provide syntax checks of your
 programs, so you might want to install one. Elpy by default uses flake8.

 [Install flake8]

 Options
 #+end_quote

 so elpy has explicit [[https://elpy.readthedocs.io/en/latest/concepts.html#virtual-envs][support for virtualenv]]
 but at present, does not seem to ahve any support for pipenv? Correct.

 however, a [[https://www.google.com/search?q=elpy+pipenv&oq=elpy+pipenv&aqs=chrome..69i57j69i60.2416j0j7&sourceid=chrome&ie=UTF-8][google search]] reveals many sources:
 - the open since 2017 elpy issue: [[https://github.com/jorgenschaefer/elpy/issues/1217][Support for pipenv]]
   - refers to pipenv.el

 trying setting WORKON_HOME for emacs at invocation time:
 #+begin_quote
 ❯ WORKON_HOME=$HOME/.local/share/virtualenvs emacs foo.py
 #+end_quote

 this initial experiment did not work:

 #+begin_quote
 Elpy Configuration

 Emacs.............: 26.2
 Elpy..............: 1.32.0
 Virtualenv........: None
 Interactive Python: python 2.7.16 (/usr/bin/python)
 RPC virtualenv....: rpc-venv (/Users/jeff/.emacs.d/elpy/rpc-venv)
  Python...........: python 3.7.7 (/Users/jeff/.emacs.d/elpy/rpc-venv/bin/python)
  Jedi.............: 0.16.0
  Rope.............: 0.16.0
  Autopep8.........: 1.5
  Yapf.............: 0.29.0
  Black............: 19.10b0
 Syntax checker....: Not found (flake8)

 Warnings

 You have not activated a virtual env. While Elpy supports this, it is often a good idea to work inside a
 virtual env. You can use M-x pyvenv-activate or M-x pyvenv-workon to activate a virtual env.

 #+end_quote

 NB: I don't seem to have the =pyenv-= group of funcions inside emacs either.
 A: user-error. they are =pyvenv=, not =pyenv=.

***** DONE make interactive python == python3
      - State "DONE"       from              [2020-03-14 Sat 13:32]
 so I set python3 as the python shell interpreter in the elpy settings
 and that seems to work.
 So try setting that in my generic configuration.  that works.
 - [X] Commit that code.
 - [X] And take it out of =settings.el=

***** DONE prefer pipenv location for virtualenv over virtualenv
      - State "DONE"       from              [2020-03-14 Sat 13:58]
****** DONE where do I store environment vars?  A: $HOME/.exports
       - State "DONE"       from              [2020-03-14 Sat 14:06]
       where is ~/.exports defined?  which project?  A: jwm-dotfiles

****** DONE what is $HOME/.local about?
       - State "DONE"       from              [2020-03-14 Sat 13:47]
       An [[https://stackoverflow.com/questions/30274743/what-is-the-purpose-of-home-local][answer from stackoverflow]]

       #+begin_quote
       The /usr/local directory mirrors the structure of the /usr directory, but can be used by system
       administrators to install local or third party packages for all users.

       The ~/.local directory now has the same purpose just for a single user.
       #+end_quote

***** DONE show that it works
      - State "DONE"       from              [2020-03-14 Sat 14:11]
      So after these changes, and
      #+begin_quote
      M-x pyvenv-workon
      treasury-scraper-xxxx
      #+end_quote

      now elpy reports:

      #+begin_quote
      Elpy Configuration

      Emacs.............: 26.2
      Elpy..............: 1.32.0
      Virtualenv........:  (/Users/jeff/.local/share/virtualenvs/treasury-scraper-1HRn0RJi/)
      Interactive Python: python3 3.7.7 (/Users/jeff/.local/share/virtualenvs/treasury-scraper-1HRn0RJi/bin/python3)
      #+end_quote

**** DONE make flake8 work
     - State "DONE"       from              [2020-03-14 Sat 14:42]
     get it installed
     figure out how to invoke it

***** DONE installed

      - State "DONE"       from              [2020-03-14 Sat 14:16]
     #+begin_quote
     (treasury-scraper) ❯ pipenv install --dev flake8
       ...
     #+end_quote

     #+begin_quote
     Elpy Configuration

     Emacs.............: 26.2
     Elpy..............: 1.32.0
     Virtualenv........:  (/Users/jeff/.local/share/virtualenvs/treasury-scraper-1HRn0RJi/)
     Interactive Python: python3 3.7.7 (/Users/jeff/.local/share/virtualenvs/treasury-scraper-1HRn0RJi/bin/python3)
     RPC virtualenv....: rpc-venv (/Users/jeff/.emacs.d/elpy/rpc-venv)
      Python...........: python 3.7.7 (/Users/jeff/.emacs.d/elpy/rpc-venv/bin/python)
      Jedi.............: 0.16.0
      Rope.............: 0.16.0
      Autopep8.........: 1.5
      Yapf.............: 0.29.0
      Black............: 19.10b0
     Syntax checker....: flake8 (/Users/jeff/.local/share/virtualenvs/treasury-scraper-1HRn0RJi/bin/flake8)
     #+end_quote

***** DONE usage
      - State "DONE"       from              [2020-03-14 Sat 14:41]
      keybinding appears to be =C-c C-v=
***** DONE configure a long line for flake8 default: 79 -> 108

      - State "DONE"       from              [2020-03-14 Sat 14:41]
      [[https://flake8.pycqa.org/en/2.5.5/config.html#user-global][looks like]] the value can be defined several places, including in =~/.config/flake8=

*** DONE configure yasnippet and auto yasnippet
    - State "DONE"       from "DOING"      [2020-03-11 Wed 19:16]
    - State "DOING"      from              [2020-03-10 Tue 20:49]

    Mike Z has a couple of nice videos here

    use case: github issue template
    use case: table to report in financial review meetings

    In particular, the auto snippet functionality looks useful to my normal flow.
    and auto yasnippets is from aboabo

**** DONE what snippets do I have loaded?
     - State "DONE"       from              [2020-03-10 Tue 21:42]

     #+BEGIN_SRC emacs-lisp
       yas-snippet-dirs
     #+END_SRC

     #+RESULTS:
     | /Users/jeff/.emacs.d/snippets | yasnippet-snippets-dir |

     #+BEGIN_SRC shell :results output
       tree ~/.emacs.d/elpa/yasnippet-snippets-20200122.1140
     #+END_SRC

     #+RESULTS:
     #+begin_example
     /Users/jeff/.emacs.d/elpa/yasnippet-snippets-20200122.1140
     ├── snippets
     │   ├── antlr-mode
     │   │   ├── project
     │   │   ├── property
     │   │   └── target
     │   ├── apples-mode
     │   │   ├── comment
     │   │   ├── considering
     │   │   ├── considering-application-responses
     │   │   ├── display-dialog
     │   │   ├── if
     │   │   ├── ignoring
     │   │   ├── ignoring-application-responses
     │   │   ├── on
     │   │   ├── repeat
     │   │   ├── repeat-until
     │   │   ├── repeat-while
     │   │   ├── repeat-with
     │   │   ├── tell-application
     │   │   ├── tell-application-to-activate
     │   │   ├── try
     │   │   ├── using-terms-from-application
     │   │   ├── with-timeout-of-seconds
     │   │   └── with-transaction
     │   ├── applescript-mode
     │   │   ├── comment
     │   │   ├── considering
     │   │   ├── considering-application-responses
     │   │   ├── display-dialog
     │   │   ├── if
     │   │   ├── ignoring
     │   │   ├── ignoring-application-responses
     │   │   ├── on
     │   │   ├── repeat
     │   │   ├── repeat-until
     │   │   ├── repeat-while
     │   │   ├── repeat-with
     │   │   ├── tell-application
     │   │   ├── tell-application-to-activate
     │   │   ├── try
     │   │   ├── using-terms-from-application
     │   │   ├── with-timeout-of-seconds
     │   │   └── with-transaction
     │   ├── bazel-mode
     │   │   ├── alias
     │   │   ├── ccb
     │   │   ├── cci
     │   │   ├── ccinc
     │   │   ├── ccl
     │   │   ├── ccp
     │   │   ├── cct
     │   │   ├── fg
     │   │   ├── genq
     │   │   ├── jbin
     │   │   ├── jimp
     │   │   ├── jlib
     │   │   ├── jrun
     │   │   ├── jtest
     │   │   ├── pybin
     │   │   ├── pylib
     │   │   ├── pyrun
     │   │   ├── pytest
     │   │   ├── shbin
     │   │   ├── shlib
     │   │   ├── shtest
     │   │   └── ws
     │   ├── bibtex-mode
     │   │   ├── article
     │   │   ├── book
     │   │   ├── booklet
     │   │   ├── conference
     │   │   ├── inbook
     │   │   ├── incollection
     │   │   ├── inproceedings
     │   │   ├── manual
     │   │   ├── masterthesis
     │   │   ├── misc
     │   │   ├── phdthesis
     │   │   ├── proceedings
     │   │   ├── techreport
     │   │   └── unpublished
     │   ├── c++-mode
     │   │   ├── acl
     │   │   ├── acm
     │   │   ├── ajf
     │   │   ├── alo
     │   │   ├── ano
     │   │   ├── assert
     │   │   ├── beginend
     │   │   ├── boost_require
     │   │   ├── cerr
     │   │   ├── cin
     │   │   ├── class
     │   │   ├── class11
     │   │   ├── cni
     │   │   ├── cnt
     │   │   ├── const_[]
     │   │   ├── constructor
     │   │   ├── cout
     │   │   ├── cpb
     │   │   ├── cpi
     │   │   ├── cpn
     │   │   ├── cpp
     │   │   ├── cpy
     │   │   ├── cstd
     │   │   ├── d+=
     │   │   ├── d_operator
     │   │   ├── d_operator[]
     │   │   ├── d_operator[]_const
     │   │   ├── d_operator_istream
     │   │   ├── d_operator_ostream
     │   │   ├── delete
     │   │   ├── delete[]
     │   │   ├── doc
     │   │   ├── dynamic_casting
     │   │   ├── enum
     │   │   ├── eql
     │   │   ├── erm
     │   │   ├── ffo
     │   │   ├── fil
     │   │   ├── fin
     │   │   ├── fixture
     │   │   ├── fln
     │   │   ├── fnd
     │   │   ├── fne
     │   │   ├── fni
     │   │   ├── fori
     │   │   ├── fre
     │   │   ├── friend
     │   │   ├── fun_declaration
     │   │   ├── gnn
     │   │   ├── gnr
     │   │   ├── gtest
     │   │   ├── ignore
     │   │   ├── ihp
     │   │   ├── ihu
     │   │   ├── inline
     │   │   ├── io
     │   │   ├── ipr
     │   │   ├── ipt
     │   │   ├── iss
     │   │   ├── isu
     │   │   ├── ita
     │   │   ├── iterator
     │   │   ├── ltr
     │   │   ├── lwr
     │   │   ├── lxc
     │   │   ├── map
     │   │   ├── member_function
     │   │   ├── mkh
     │   │   ├── mme
     │   │   ├── mne
     │   │   ├── module
     │   │   ├── mpb
     │   │   ├── mrg
     │   │   ├── msm
     │   │   ├── mxe
     │   │   ├── namespace
     │   │   ├── nno
     │   │   ├── ns
     │   │   ├── nth
     │   │   ├── nxp
     │   │   ├── oit
     │   │   ├── operator!=
     │   │   ├── operator+
     │   │   ├── operator+=
     │   │   ├── operator=
     │   │   ├── operator==
     │   │   ├── operator[]
     │   │   ├── operator_istream
     │   │   ├── operator_ostream
     │   │   ├── ostream
     │   │   ├── pack
     │   │   ├── phh
     │   │   ├── ppt
     │   │   ├── private
     │   │   ├── protected
     │   │   ├── prp
     │   │   ├── psc
     │   │   ├── pst
     │   │   ├── ptc
     │   │   ├── ptn
     │   │   ├── public
     │   │   ├── rci
     │   │   ├── rmc
     │   │   ├── rmf
     │   │   ├── rmi
     │   │   ├── rmv
     │   │   ├── rpc
     │   │   ├── rpi
     │   │   ├── rpl
     │   │   ├── rtc
     │   │   ├── rte
     │   │   ├── rvc
     │   │   ├── rvr
     │   │   ├── shf
     │   │   ├── spt
     │   │   ├── srh
     │   │   ├── srn
     │   │   ├── srt
     │   │   ├── sstream
     │   │   ├── std
     │   │   ├── std_colon
     │   │   ├── sth
     │   │   ├── sti
     │   │   ├── sto
     │   │   ├── str
     │   │   ├── sts
     │   │   ├── stv
     │   │   ├── swr
     │   │   ├── template
     │   │   ├── test\ case
     │   │   ├── test_main
     │   │   ├── test_suite
     │   │   ├── tfm
     │   │   ├── this
     │   │   ├── throw
     │   │   ├── trm
     │   │   ├── try
     │   │   ├── tryw
     │   │   ├── ucp
     │   │   ├── upr
     │   │   ├── uqe
     │   │   ├── using
     │   │   └── vector
     │   ├── c-lang-common
     │   │   ├── fopen
     │   │   ├── function_doxygen_doc
     │   │   ├── ifdef
     │   │   ├── inc
     │   │   ├── inc.1
     │   │   ├── main
     │   │   ├── math
     │   │   ├── once
     │   │   └── typedef
     │   ├── c-mode
     │   │   ├── assert
     │   │   ├── compile
     │   │   ├── define
     │   │   ├── fgets
     │   │   ├── fprintf
     │   │   ├── malloc
     │   │   ├── packed
     │   │   ├── printf
     │   │   ├── scanf
     │   │   ├── stdio
     │   │   ├── stdlib
     │   │   ├── string
     │   │   ├── strstr
     │   │   ├── union
     │   │   └── unistd
     │   ├── cc-mode
     │   │   ├── case
     │   │   ├── do
     │   │   ├── else
     │   │   ├── file_description
     │   │   ├── for
     │   │   ├── for_n
     │   │   ├── function_description
     │   │   ├── if
     │   │   ├── member_description
     │   │   ├── printf
     │   │   ├── struct
     │   │   ├── switch
     │   │   ├── ternary
     │   │   └── while
     │   ├── chef-mode
     │   │   ├── action
     │   │   ├── bash
     │   │   ├── cookbook_file
     │   │   ├── cron
     │   │   ├── cronf
     │   │   ├── deploy
     │   │   ├── directory
     │   │   ├── directoryf
     │   │   ├── env
     │   │   ├── execute
     │   │   ├── executef
     │   │   ├── file
     │   │   ├── filef
     │   │   ├── git
     │   │   ├── group
     │   │   ├── http_request
     │   │   ├── http_requestp
     │   │   ├── ignore_failure
     │   │   ├── inc
     │   │   ├── link
     │   │   ├── linkf
     │   │   ├── log
     │   │   ├── machine
     │   │   ├── meta
     │   │   ├── not_if
     │   │   ├── notifies
     │   │   ├── only_if
     │   │   ├── pac
     │   │   ├── pak
     │   │   ├── provider
     │   │   ├── python
     │   │   ├── remote_file
     │   │   ├── retries
     │   │   ├── role
     │   │   ├── ruby
     │   │   ├── script
     │   │   ├── service
     │   │   ├── servicep
     │   │   ├── subscribes
     │   │   ├── supports
     │   │   ├── template
     │   │   ├── templatev
     │   │   └── user
     │   ├── cider-repl-mode
     │   ├── clojure-mode
     │   │   ├── bench
     │   │   ├── bp
     │   │   ├── def
     │   │   ├── defm
     │   │   ├── defn
     │   │   ├── defr
     │   │   ├── deft
     │   │   ├── doseq
     │   │   ├── fn
     │   │   ├── for
     │   │   ├── if
     │   │   ├── ifl
     │   │   ├── import
     │   │   ├── is
     │   │   ├── let
     │   │   ├── map
     │   │   ├── map.lambda
     │   │   ├── mdoc
     │   │   ├── ns
     │   │   ├── opts
     │   │   ├── pr
     │   │   ├── print
     │   │   ├── reduce
     │   │   ├── require
     │   │   ├── test
     │   │   ├── try
     │   │   ├── use
     │   │   ├── when
     │   │   └── whenl
     │   ├── cmake-mode
     │   │   ├── add_executable
     │   │   ├── add_library
     │   │   ├── cmake_minimum_required
     │   │   ├── foreach
     │   │   ├── function
     │   │   ├── if
     │   │   ├── ifelse
     │   │   ├── include
     │   │   ├── macro
     │   │   ├── message
     │   │   ├── option
     │   │   ├── project
     │   │   └── set
     │   ├── conf-unix-mode
     │   │   └── section
     │   ├── coq-mode
     │   │   ├── definitions
     │   │   │   ├── definition.yasnippet
     │   │   │   ├── fixpoint-with.yasnippet
     │   │   │   ├── fixpoint.yasnippet
     │   │   │   ├── fun.yasnippet
     │   │   │   └── inductive.yasnippet
     │   │   ├── lookup
     │   │   │   ├── check.yasnippet
     │   │   │   ├── locate.yasnippet
     │   │   │   ├── print.yasnippet
     │   │   │   ├── search.yasnippet
     │   │   │   ├── searchabout.yasnippet
     │   │   │   └── searchpattern.yasnippet
     │   │   ├── misc
     │   │   │   ├── forall.yasnippet
     │   │   │   ├── if.yasnippet
     │   │   │   ├── infix.yasnippet
     │   │   │   ├── match.yasnippet
     │   │   │   ├── notation.yasnippet
     │   │   │   └── require.yasnippet
     │   │   ├── propositions
     │   │   │   ├── axiom.yasnippet
     │   │   │   ├── conjecture.yasnippet
     │   │   │   ├── corollary.yasnippet
     │   │   │   ├── example.yasnippet
     │   │   │   ├── fact.yasnippet
     │   │   │   ├── hypotheses.yasnippet
     │   │   │   ├── hypothesis.yasnippet
     │   │   │   ├── instance.yasnippet
     │   │   │   ├── lemma.yasnippet
     │   │   │   ├── parameter.yasnippet
     │   │   │   ├── proposition.yasnippet
     │   │   │   ├── remark.yasnippet
     │   │   │   ├── theorem.yasnippet
     │   │   │   ├── variable.yasnippet
     │   │   │   └── variables.yasnippet
     │   │   └── tactics
     │   │       ├── case.yasnippet
     │   │       ├── destruct.yasnippet
     │   │       ├── induction.yasnippet
     │   │       ├── rename.yasnippet
     │   │       ├── rewrite-left.yasnippet
     │   │       ├── rewrite-right.yasnippet
     │   │       └── rewrite.yasnippet
     │   ├── cperl-mode
     │   ├── cpp-omnet-mode
     │   │   ├── EV
     │   │   ├── emit_signal
     │   │   ├── intuniform
     │   │   ├── math
     │   │   ├── nan
     │   │   ├── omnet
     │   │   ├── parameter_omnetpp
     │   │   ├── scheduleAt
     │   │   └── uniform
     │   ├── crystal-mode
     │   │   ├── any
     │   │   ├── case
     │   │   ├── cls
     │   │   ├── def
     │   │   ├── ea
     │   │   ├── eac
     │   │   ├── eai
     │   │   ├── eawi
     │   │   ├── el
     │   │   ├── esi
     │   │   ├── for
     │   │   ├── forin
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── inc
     │   │   ├── init
     │   │   ├── map
     │   │   ├── mod
     │   │   ├── red
     │   │   ├── reject
     │   │   ├── req
     │   │   ├── select
     │   │   ├── upt
     │   │   ├── when
     │   │   ├── while
     │   │   └── zip
     │   ├── csharp-mode
     │   │   ├── attrib
     │   │   ├── attrib.1
     │   │   ├── attrib.2
     │   │   ├── class
     │   │   ├── comment
     │   │   ├── comment.1
     │   │   ├── comment.2
     │   │   ├── comment.3
     │   │   ├── fore
     │   │   ├── main
     │   │   ├── method
     │   │   ├── namespace
     │   │   ├── prop
     │   │   ├── read
     │   │   ├── readline
     │   │   ├── region
     │   │   ├── trycatch
     │   │   ├── using
     │   │   ├── using.1
     │   │   ├── using.2
     │   │   ├── write
     │   │   └── writeline
     │   ├── css-mode
     │   │   ├── bg
     │   │   ├── bg.1
     │   │   ├── bor
     │   │   ├── cl
     │   │   ├── disp.block
     │   │   ├── disp.inline
     │   │   ├── disp.none
     │   │   ├── ff
     │   │   ├── fs
     │   │   ├── mar.bottom
     │   │   ├── mar.left
     │   │   ├── mar.mar
     │   │   ├── mar.margin
     │   │   ├── mar.right
     │   │   ├── mar.top
     │   │   ├── pad.bottom
     │   │   ├── pad.left
     │   │   ├── pad.pad
     │   │   ├── pad.padding
     │   │   ├── pad.right
     │   │   ├── pad.top
     │   │   └── v
     │   ├── d-mode
     │   │   ├── class
     │   │   ├── debug
     │   │   ├── debugm
     │   │   ├── enum
     │   │   ├── fe
     │   │   ├── fer
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── im
     │   │   ├── main
     │   │   ├── me
     │   │   ├── r
     │   │   ├── struct
     │   │   ├── tc
     │   │   ├── tcf
     │   │   ├── tf
     │   │   ├── unit
     │   │   ├── version
     │   │   └── while
     │   ├── dart-mode
     │   │   ├── aclass
     │   │   ├── class
     │   │   ├── didchangedependencies
     │   │   ├── dispose
     │   │   ├── ext
     │   │   ├── for
     │   │   ├── fori
     │   │   ├── func
     │   │   ├── funca
     │   │   ├── getset
     │   │   ├── getter
     │   │   ├── impl
     │   │   ├── import
     │   │   ├── initstate
     │   │   ├── main
     │   │   ├── part
     │   │   ├── setter
     │   │   ├── statefulwidget
     │   │   └── statelesswidget
     │   ├── dix-mode
     │   │   ├── call-macro
     │   │   ├── choose
     │   │   ├── clip
     │   │   ├── e-in-mono-section
     │   │   ├── e-in-pardef
     │   │   ├── let
     │   │   ├── lit
     │   │   ├── lit-tag
     │   │   ├── otherwise
     │   │   ├── p
     │   │   ├── par
     │   │   ├── pardef
     │   │   ├── s
     │   │   ├── sdef
     │   │   ├── section
     │   │   ├── var
     │   │   ├── when
     │   │   └── with-param
     │   ├── dockerfile-mode
     │   │   └── dockerize
     │   ├── elixir-mode
     │   │   ├── after
     │   │   ├── call
     │   │   ├── case
     │   │   ├── cast
     │   │   ├── cond
     │   │   ├── def
     │   │   ├── defmacro
     │   │   ├── defmacrop
     │   │   ├── defmodule
     │   │   ├── defmodule_filename
     │   │   ├── defp
     │   │   ├── do
     │   │   ├── doc
     │   │   ├── fn
     │   │   ├── for
     │   │   ├── function
     │   │   ├── function-one-line
     │   │   ├── hcall
     │   │   ├── hcast
     │   │   ├── hinfo
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── io
     │   │   ├── iop
     │   │   ├── mdoc
     │   │   ├── pry
     │   │   ├── receive
     │   │   ├── test
     │   │   └── unless
     │   ├── emacs-lisp-mode
     │   │   ├── add-hook
     │   │   ├── and
     │   │   ├── aref
     │   │   ├── aset
     │   │   ├── assq
     │   │   ├── autoload
     │   │   ├── backward-char
     │   │   ├── beginning-of-line
     │   │   ├── bounds-of-thing-at-point
     │   │   ├── buffer-file-name
     │   │   ├── buffer-modified-p
     │   │   ├── buffer-substring
     │   │   ├── buffer-substring-no-properties
     │   │   ├── cond
     │   │   ├── condition-case
     │   │   ├── const
     │   │   ├── copy-directory
     │   │   ├── copy-file
     │   │   ├── current-buffer
     │   │   ├── custom-autoload
     │   │   ├── defalias
     │   │   ├── defcustom
     │   │   ├── define-key
     │   │   ├── defun
     │   │   ├── defvar
     │   │   ├── delete-char
     │   │   ├── delete-directory
     │   │   ├── delete-file
     │   │   ├── delete-region
     │   │   ├── directory-files
     │   │   ├── dired.process_marked
     │   │   ├── end-of-line
     │   │   ├── error
     │   │   ├── ert-deftest
     │   │   ├── expand-file-name
     │   │   ├── fboundp
     │   │   ├── file-name-directory
     │   │   ├── file-name-extension
     │   │   ├── file-name-nondirectory
     │   │   ├── file-name-sans-extension
     │   │   ├── file-relative-name
     │   │   ├── file.process
     │   │   ├── file.read-lines
     │   │   ├── find-file
     │   │   ├── find-replace
     │   │   ├── format
     │   │   ├── forward-char
     │   │   ├── forward-line
     │   │   ├── get
     │   │   ├── global-set-key
     │   │   ├── goto-char
     │   │   ├── grabstring
     │   │   ├── grabthing
     │   │   ├── header
     │   │   ├── insert
     │   │   ├── insert-file-contents
     │   │   ├── interactive
     │   │   ├── kbd
     │   │   ├── kill-buffer
     │   │   ├── lambda
     │   │   ├── let
     │   │   ├── line-beginning-position
     │   │   ├── line-end-position
     │   │   ├── looking-at
     │   │   ├── make-directory
     │   │   ├── make-local-variable
     │   │   ├── mapc
     │   │   ├── match-beginning
     │   │   ├── match-end
     │   │   ├── match-string
     │   │   ├── memq
     │   │   ├── message
     │   │   ├── minor_mode
     │   │   ├── not
     │   │   ├── nth
     │   │   ├── number-to-string
     │   │   ├── or
     │   │   ├── point
     │   │   ├── point-max
     │   │   ├── point-min
     │   │   ├── put
     │   │   ├── re-search-backward
     │   │   ├── re-search-forward
     │   │   ├── region-active-p
     │   │   ├── region-beginning
     │   │   ├── region-end
     │   │   ├── rename-file
     │   │   ├── replace-regexp
     │   │   ├── replace-regexp-in-string
     │   │   ├── save-buffer
     │   │   ├── save-excursion
     │   │   ├── search-backward
     │   │   ├── search-backward-regexp
     │   │   ├── search-forward
     │   │   ├── search-forward-regexp
     │   │   ├── set-buffer
     │   │   ├── set-file-modes
     │   │   ├── set-mark
     │   │   ├── setq
     │   │   ├── should
     │   │   ├── skip-chars-backward
     │   │   ├── skip-chars-forward
     │   │   ├── split-string
     │   │   ├── string-match
     │   │   ├── string-to-number
     │   │   ├── string=
     │   │   ├── substring
     │   │   ├── thing-at-point
     │   │   ├── traverse_dir
     │   │   ├── use-package
     │   │   ├── use-package-binding
     │   │   ├── vector
     │   │   ├── when
     │   │   ├── widget-get
     │   │   ├── with-current-buffer
     │   │   ├── word-or-region
     │   │   ├── word_regexp
     │   │   ├── x-dired.process_marked
     │   │   ├── x-file.process
     │   │   ├── x-file.read-lines
     │   │   ├── x-find-replace
     │   │   ├── x-grabstring
     │   │   ├── x-grabthing
     │   │   ├── x-traverse_dir
     │   │   ├── x-word-or-region
     │   │   └── yes-or-no-p
     │   ├── enh-ruby-mode
     │   ├── ensime-mode
     │   ├── erc-mode
     │   │   ├── blist
     │   │   └── help
     │   ├── erlang-mode
     │   │   ├── after
     │   │   ├── begin
     │   │   ├── beh
     │   │   ├── case
     │   │   ├── compile
     │   │   ├── def
     │   │   ├── exp
     │   │   ├── fun
     │   │   ├── if
     │   │   ├── ifdef
     │   │   ├── ifndef
     │   │   ├── imp
     │   │   ├── inc
     │   │   ├── inc.lib
     │   │   ├── loop
     │   │   ├── mod
     │   │   ├── rcv
     │   │   ├── rcv.after
     │   │   ├── rec
     │   │   ├── try
     │   │   └── undef
     │   ├── f90-mode
     │   │   ├── bd
     │   │   ├── c
     │   │   ├── ch
     │   │   ├── cx
     │   │   ├── dc
     │   │   ├── do
     │   │   ├── dp
     │   │   ├── forall
     │   │   ├── function
     │   │   ├── if
     │   │   ├── in
     │   │   ├── inc
     │   │   ├── intr
     │   │   ├── l
     │   │   ├── module
     │   │   ├── pa
     │   │   ├── program
     │   │   ├── puref
     │   │   ├── pures
     │   │   ├── re
     │   │   ├── subroutine
     │   │   ├── until
     │   │   ├── where
     │   │   ├── while
     │   │   └── wr
     │   ├── faust-mode
     │   │   ├── button
     │   │   ├── case
     │   │   ├── checkbox
     │   │   ├── component
     │   │   ├── declare
     │   │   ├── declareauthor
     │   │   ├── declarelicense
     │   │   ├── declarename
     │   │   ├── declareversion
     │   │   ├── hbargraph
     │   │   ├── header
     │   │   ├── hgroup
     │   │   ├── hslider
     │   │   ├── import
     │   │   ├── nentry
     │   │   ├── par
     │   │   ├── process
     │   │   ├── processx
     │   │   ├── prod
     │   │   ├── rule
     │   │   ├── seq
     │   │   ├── sum
     │   │   ├── tgroup
     │   │   ├── vbargraph
     │   │   ├── vgroup
     │   │   ├── vslider
     │   │   └── with
     │   ├── fish-mode
     │   │   ├── bang
     │   │   ├── block
     │   │   ├── bp
     │   │   ├── for
     │   │   ├── function
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── sw
     │   │   └── while
     │   ├── git-commit-mode
     │   │   ├── fixes
     │   │   ├── references
     │   │   └── type
     │   ├── go-mode
     │   │   ├── benchmark
     │   │   ├── const
     │   │   ├── const(
     │   │   ├── dd
     │   │   ├── default
     │   │   ├── else
     │   │   ├── error
     │   │   ├── example
     │   │   ├── for
     │   │   ├── forrange
     │   │   ├── func
     │   │   ├── if
     │   │   ├── iferr
     │   │   ├── import
     │   │   ├── import(
     │   │   ├── lambda
     │   │   ├── main
     │   │   ├── map
     │   │   ├── method
     │   │   ├── parallel_benchmark
     │   │   ├── printf
     │   │   ├── select
     │   │   ├── switch
     │   │   ├── test
     │   │   ├── testmain
     │   │   ├── type
     │   │   ├── var
     │   │   └── var(
     │   ├── groovy-mode
     │   │   ├── class
     │   │   ├── def
     │   │   ├── dict
     │   │   ├── for
     │   │   ├── println
     │   │   └── times
     │   ├── haskell-mode
     │   │   ├── case
     │   │   ├── data
     │   │   ├── doc
     │   │   ├── efix
     │   │   ├── function
     │   │   ├── functione
     │   │   ├── import
     │   │   ├── instance
     │   │   ├── main
     │   │   ├── module
     │   │   ├── new\ class
     │   │   ├── pragma
     │   │   └── print
     │   ├── html-mode
     │   │   ├── dd
     │   │   ├── dl
     │   │   ├── doctype
     │   │   ├── doctype.html5
     │   │   ├── doctype.xhtml1
     │   │   ├── doctype.xhtml1_1
     │   │   ├── doctype.xhtml1_strict
     │   │   ├── doctype.xhtml1_transitional
     │   │   ├── dt
     │   │   ├── form
     │   │   ├── html
     │   │   ├── html.xmlns
     │   │   ├── link.import
     │   │   ├── link.stylesheet
     │   │   ├── link.stylesheet-ie
     │   │   ├── mailto
     │   │   ├── meta
     │   │   ├── meta.http-equiv
     │   │   ├── script.javascript
     │   │   ├── script.javascript-src
     │   │   ├── textarea
     │   │   └── th
     │   ├── hy-mode
     │   │   ├── class
     │   │   ├── cond
     │   │   ├── def
     │   │   ├── defm
     │   │   ├── do
     │   │   ├── for
     │   │   ├── if
     │   │   ├── ifn
     │   │   ├── imp
     │   │   ├── let
     │   │   ├── main
     │   │   ├── req
     │   │   ├── s
     │   │   ├── unless
     │   │   └── when
     │   ├── java-mode
     │   │   ├── apr_assert
     │   │   ├── assert
     │   │   ├── assertEquals
     │   │   ├── cls
     │   │   ├── constructor
     │   │   ├── define\ test\ method
     │   │   ├── doc
     │   │   ├── equals
     │   │   ├── file_class
     │   │   ├── for
     │   │   ├── fori
     │   │   ├── getter
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── import
     │   │   ├── iterator
     │   │   ├── javadoc
     │   │   ├── lambda
     │   │   ├── main
     │   │   ├── main_class
     │   │   ├── method
     │   │   ├── new
     │   │   ├── override
     │   │   ├── param
     │   │   ├── printf
     │   │   ├── println
     │   │   ├── return
     │   │   ├── test
     │   │   ├── testClass
     │   │   ├── this
     │   │   ├── toString
     │   │   ├── try
     │   │   └── value
     │   ├── js-mode
     │   │   ├── al
     │   │   ├── anfn
     │   │   ├── bnd
     │   │   ├── class
     │   │   ├── cmmb
     │   │   ├── com
     │   │   ├── console
     │   │   │   ├── cas
     │   │   │   ├── ccl
     │   │   │   ├── cco
     │   │   │   ├── cdi
     │   │   │   ├── cer
     │   │   │   ├── cge
     │   │   │   ├── cgr
     │   │   │   ├── cin
     │   │   │   ├── clg
     │   │   │   ├── clo
     │   │   │   ├── cte
     │   │   │   └── cwa
     │   │   ├── const
     │   │   ├── dar
     │   │   ├── debugger
     │   │   ├── dob
     │   │   ├── each
     │   │   ├── edf
     │   │   ├── el
     │   │   ├── enf
     │   │   ├── exa
     │   │   ├── exd
     │   │   ├── exp
     │   │   ├── fin
     │   │   ├── flow
     │   │   ├── fof
     │   │   ├── for
     │   │   ├── fre
     │   │   ├── function
     │   │   ├── if
     │   │   ├── ima
     │   │   ├── imd
     │   │   ├── ime
     │   │   ├── imn
     │   │   ├── imp
     │   │   ├── init
     │   │   ├── let
     │   │   ├── met
     │   │   ├── metb
     │   │   ├── multiline-comment
     │   │   ├── nfn
     │   │   ├── param-comment
     │   │   ├── pge
     │   │   ├── prom
     │   │   ├── pse
     │   │   ├── return-comment
     │   │   ├── sti
     │   │   ├── sto
     │   │   ├── switch
     │   │   ├── try-catch
     │   │   ├── type-inline-comment
     │   │   └── type-multiline-comment
     │   ├── js2-mode
     │   ├── js3-mode
     │   ├── julia-mode
     │   │   ├── atype
     │   │   ├── begin
     │   │   ├── do
     │   │   ├── for
     │   │   ├── fun
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── let
     │   │   ├── macro
     │   │   ├── module
     │   │   ├── mutstr
     │   │   ├── ptype
     │   │   ├── quote
     │   │   ├── struct
     │   │   ├── try
     │   │   ├── tryf
     │   │   ├── using
     │   │   └── while
     │   ├── kotlin-mode
     │   │   ├── anonymous
     │   │   ├── closure
     │   │   ├── exfun
     │   │   ├── exval
     │   │   ├── exvar
     │   │   ├── fun
     │   │   ├── ifn
     │   │   ├── inn
     │   │   ├── interface
     │   │   ├── iter
     │   │   ├── main
     │   │   ├── psvm
     │   │   ├── serr
     │   │   ├── singleton
     │   │   ├── sout
     │   │   ├── soutv
     │   │   └── void
     │   ├── latex-mode
     │   │   ├── acronym
     │   │   ├── alertblock
     │   │   ├── alg
     │   │   ├── align
     │   │   ├── article
     │   │   ├── begin
     │   │   ├── bigcap
     │   │   ├── bigcup
     │   │   ├── binom
     │   │   ├── block
     │   │   ├── capgls
     │   │   ├── caption
     │   │   ├── cite
     │   │   ├── code
     │   │   ├── columns
     │   │   ├── description
     │   │   ├── documentclass
     │   │   ├── emph
     │   │   ├── enumerate
     │   │   ├── equation
     │   │   ├── figure
     │   │   ├── frac
     │   │   ├── frame
     │   │   ├── german-quotes
     │   │   ├── german-quotes-single
     │   │   ├── gls
     │   │   ├── glspl
     │   │   ├── if
     │   │   ├── includegraphics
     │   │   ├── int
     │   │   ├── item
     │   │   ├── itemize
     │   │   ├── label
     │   │   ├── labelcref
     │   │   ├── left-right
     │   │   ├── listing
     │   │   ├── moderncv
     │   │   ├── moderncv-cvcomputer
     │   │   ├── moderncv-cventry
     │   │   ├── moderncv-cvlanguage
     │   │   ├── moderncv-cvline
     │   │   ├── moderncv-cvlistdoubleitem
     │   │   ├── moderncv-cvlistitem
     │   │   ├── movie
     │   │   ├── newcommand
     │   │   ├── newglossaryentry
     │   │   ├── note
     │   │   ├── prod
     │   │   ├── python
     │   │   ├── question
     │   │   ├── section
     │   │   ├── subf
     │   │   ├── subfigure
     │   │   ├── subsec
     │   │   ├── sum
     │   │   ├── textbf
     │   │   └── usepackage
     │   ├── lisp-interaction-mode
     │   │   └── defun
     │   ├── lisp-mode
     │   │   ├── class
     │   │   ├── comment
     │   │   ├── cond
     │   │   ├── defpackage
     │   │   ├── do
     │   │   ├── for
     │   │   ├── foreach
     │   │   ├── format
     │   │   ├── if
     │   │   ├── ifelse
     │   │   ├── ifnot
     │   │   ├── slot
     │   │   └── typecast
     │   ├── lua-mode
     │   │   ├── do
     │   │   ├── eif
     │   │   ├── eife
     │   │   ├── fun
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── ipairs
     │   │   ├── pairs
     │   │   ├── repeat
     │   │   ├── require
     │   │   └── while
     │   ├── m4-mode
     │   │   └── def
     │   ├── makefile-automake-mode
     │   │   └── noinst_HEADERS
     │   ├── makefile-bsdmake-mode
     │   │   ├── PHONY
     │   │   ├── echo
     │   │   ├── gen
     │   │   ├── if
     │   │   └── var
     │   ├── makefile-gmake-mode
     │   │   ├── abspath
     │   │   ├── addprefix
     │   │   ├── addsuffix
     │   │   ├── dir
     │   │   ├── make
     │   │   ├── notdir
     │   │   ├── patsubst
     │   │   ├── phony
     │   │   ├── shell
     │   │   ├── special
     │   │   ├── template
     │   │   └── wildcard
     │   ├── makefile-mode
     │   │   ├── all
     │   │   └── clean
     │   ├── malabar-mode
     │   │   └── variable
     │   ├── markdown-mode
     │   │   ├── back-quote
     │   │   ├── code
     │   │   ├── emphasis
     │   │   ├── h1.1
     │   │   ├── h1.2
     │   │   ├── h2.1
     │   │   ├── h2.2
     │   │   ├── h3
     │   │   ├── h4
     │   │   ├── h5
     │   │   ├── h6
     │   │   ├── highlight
     │   │   ├── hr.1
     │   │   ├── hr.2
     │   │   ├── hyphen
     │   │   ├── img
     │   │   ├── link
     │   │   ├── ordered-list
     │   │   ├── plus
     │   │   ├── rimg
     │   │   ├── rlb
     │   │   ├── rlink
     │   │   ├── strong-emphasis
     │   │   └── utf8
     │   ├── nasm-mode
     │   │   └── function_doxygen_doc
     │   ├── ned-mode
     │   │   ├── chan
     │   │   ├── connections
     │   │   ├── for
     │   │   ├── import
     │   │   ├── network
     │   │   ├── simple
     │   │   └── submodules
     │   ├── nesc-mode
     │   │   ├── TOSSIM
     │   │   ├── command
     │   │   ├── dbg
     │   │   ├── event
     │   │   ├── ifdef
     │   │   ├── interface
     │   │   ├── module
     │   │   ├── nx
     │   │   ├── provides
     │   │   ├── sim
     │   │   ├── uint8_t
     │   │   └── uses
     │   ├── nix-mode
     │   │   ├── buildPhase
     │   │   ├── checkPhase
     │   │   ├── configurePhase
     │   │   ├── distPhase
     │   │   ├── fixPhase
     │   │   ├── installCheckPhase
     │   │   ├── installPhase
     │   │   ├── package_github
     │   │   ├── package_url
     │   │   ├── patchPhase
     │   │   ├── phases
     │   │   └── unpackPhase
     │   ├── nsis-mode
     │   │   ├── define
     │   │   ├── function
     │   │   ├── if
     │   │   ├── include
     │   │   ├── insert_macro
     │   │   ├── instdir
     │   │   ├── macro
     │   │   ├── message
     │   │   ├── outdir
     │   │   ├── outfile
     │   │   └── section
     │   ├── nxml-mode
     │   │   ├── body
     │   │   ├── br
     │   │   ├── doctype
     │   │   ├── doctype_xhtml1_strict
     │   │   ├── doctype_xhtml1_transitional
     │   │   ├── form
     │   │   ├── href
     │   │   ├── html
     │   │   ├── img
     │   │   ├── input
     │   │   ├── link
     │   │   ├── meta
     │   │   ├── name
     │   │   ├── quote
     │   │   ├── style
     │   │   ├── tag
     │   │   ├── tag_closing
     │   │   └── tag_newline
     │   ├── octave-mode
     │   │   ├── for
     │   │   ├── function
     │   │   └── if
     │   ├── org-mode
     │   │   ├── author
     │   │   ├── center
     │   │   ├── date
     │   │   ├── description
     │   │   ├── dot
     │   │   ├── elisp
     │   │   ├── emacs-lisp
     │   │   ├── email
     │   │   ├── embedded
     │   │   ├── entry
     │   │   ├── exampleblock
     │   │   ├── export
     │   │   ├── figure
     │   │   ├── html
     │   │   ├── image
     │   │   ├── img
     │   │   ├── include
     │   │   ├── ipython
     │   │   ├── keywords
     │   │   ├── language
     │   │   ├── link
     │   │   ├── matrix
     │   │   ├── options
     │   │   ├── python
     │   │   ├── quote
     │   │   ├── rv_background
     │   │   ├── rv_image_background
     │   │   ├── setup
     │   │   ├── src
     │   │   ├── style
     │   │   ├── table
     │   │   ├── title
     │   │   ├── uml
     │   │   ├── verse
     │   │   └── video
     │   ├── perl-mode
     │   │   ├── bang
     │   │   ├── enc
     │   │   ├── eval
     │   │   ├── for
     │   │   ├── fore
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── ifee
     │   │   ├── strict
     │   │   ├── sub
     │   │   ├── unless
     │   │   ├── while
     │   │   ├── xfore
     │   │   ├── xif
     │   │   ├── xunless
     │   │   └── xwhile
     │   ├── php-mode
     │   │   ├── __call
     │   │   ├── __callStatic
     │   │   ├── catch
     │   │   ├── cls
     │   │   ├── clse
     │   │   ├── clsi
     │   │   ├── const
     │   │   ├── define
     │   │   ├── doc-comment-multiline
     │   │   ├── doc-comment-oneline
     │   │   ├── else
     │   │   ├── elseif
     │   │   ├── fn
     │   │   ├── foreach
     │   │   ├── foreach_value
     │   │   ├── function
     │   │   ├── function-return-type
     │   │   ├── get
     │   │   ├── if
     │   │   ├── interface
     │   │   ├── license-doc
     │   │   ├── license-doc-apache
     │   │   ├── license-doc-gplv2
     │   │   ├── license-doc-mit
     │   │   ├── license-doc-mpl
     │   │   ├── method-doc
     │   │   ├── param-doc
     │   │   ├── property-doc
     │   │   ├── psysh
     │   │   ├── return-doc
     │   │   ├── set
     │   │   ├── stdout
     │   │   ├── switch
     │   │   ├── ticks
     │   │   ├── trait
     │   │   ├── try
     │   │   ├── var-doc
     │   │   ├── var-oneline
     │   │   ├── vd
     │   │   ├── vde
     │   │   └── ve
     │   ├── powershell-mode
     │   │   ├── cmdletbinding
     │   │   ├── comment-based-help
     │   │   ├── function
     │   │   └── parameter
     │   ├── prog-mode
     │   │   ├── comment
     │   │   ├── commentblock
     │   │   ├── commentline
     │   │   ├── fixme
     │   │   ├── todo
     │   │   └── xxx
     │   ├── protobuf-mode
     │   │   ├── message
     │   │   └── syntax
     │   ├── python-mode
     │   │   ├── __contains__
     │   │   ├── __enter__
     │   │   ├── __exit__
     │   │   ├── __getitem__
     │   │   ├── __len__
     │   │   ├── __new__
     │   │   ├── __setitem__
     │   │   ├── all
     │   │   ├── arg
     │   │   ├── arg_positional
     │   │   ├── assert
     │   │   ├── assertEqual
     │   │   ├── assertFalse
     │   │   ├── assertIn
     │   │   ├── assertNotEqual
     │   │   ├── assertNotIn
     │   │   ├── assertRaises
     │   │   ├── assertRaises.with
     │   │   ├── assertTrue
     │   │   ├── bang
     │   │   ├── celery_pdb
     │   │   ├── class_doxygen_doc
     │   │   ├── classmethod
     │   │   ├── cls
     │   │   ├── dataclass
     │   │   ├── dec
     │   │   ├── deftest
     │   │   ├── django_test_class
     │   │   ├── doc
     │   │   ├── doctest
     │   │   ├── embed
     │   │   ├── enum
     │   │   ├── eq
     │   │   ├── for
     │   │   ├── from
     │   │   ├── function
     │   │   ├── function_docstring
     │   │   ├── function_docstring_numpy
     │   │   ├── function_doxygen_doc
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── ifmain
     │   │   ├── import
     │   │   ├── init
     │   │   ├── init_docstring
     │   │   ├── init_docstring_numpy
     │   │   ├── interact
     │   │   ├── ipdb
     │   │   ├── iter
     │   │   ├── lambda
     │   │   ├── list
     │   │   ├── logger_name
     │   │   ├── logging
     │   │   ├── main
     │   │   ├── metaclass
     │   │   ├── method
     │   │   ├── method_docstring
     │   │   ├── method_docstring_numpy
     │   │   ├── not_impl
     │   │   ├── np
     │   │   ├── parse_args
     │   │   ├── parser
     │   │   ├── pass
     │   │   ├── pdb
     │   │   ├── pl
     │   │   ├── print
     │   │   ├── prop
     │   │   ├── pudb
     │   │   ├── reg
     │   │   ├── repr
     │   │   ├── return
     │   │   ├── scls
     │   │   ├── script
     │   │   ├── self
     │   │   ├── self_without_dot
     │   │   ├── selfassign
     │   │   ├── setdef
     │   │   ├── setup
     │   │   ├── size
     │   │   ├── static
     │   │   ├── str
     │   │   ├── super
     │   │   ├── test_class
     │   │   ├── test_file
     │   │   ├── try
     │   │   ├── tryelse
     │   │   ├── unicode
     │   │   ├── unicode_literals
     │   │   ├── utf8
     │   │   ├── while
     │   │   ├── with
     │   │   └── with_statement
     │   ├── racket-mode
     │   │   ├── case
     │   │   ├── caselambda
     │   │   ├── cond
     │   │   ├── define
     │   │   ├── do
     │   │   ├── for
     │   │   ├── if
     │   │   ├── lambda
     │   │   ├── let
     │   │   ├── match
     │   │   ├── unless
     │   │   └── when
     │   ├── reason-mode
     │   │   ├── component
     │   │   ├── for
     │   │   ├── function
     │   │   ├── functor
     │   │   ├── if
     │   │   ├── ifelse
     │   │   ├── let
     │   │   ├── match_case
     │   │   ├── module
     │   │   ├── switch
     │   │   └── while
     │   ├── rjsx-mode
     │   │   ├── GraphQL
     │   │   │   ├── expgql
     │   │   │   └── graphql
     │   │   ├── Jest
     │   │   │   ├── desc
     │   │   │   ├── snrtest
     │   │   │   ├── sntest
     │   │   │   ├── srtest
     │   │   │   ├── stest
     │   │   │   ├── test
     │   │   │   └── tit
     │   │   ├── React
     │   │   │   ├── cdm
     │   │   │   ├── cdup
     │   │   │   ├── cp
     │   │   │   ├── cref
     │   │   │   ├── cs
     │   │   │   ├── cwm
     │   │   │   ├── cwr
     │   │   │   ├── cwun
     │   │   │   ├── cwup
     │   │   │   ├── est
     │   │   │   ├── fref
     │   │   │   ├── gdsfp
     │   │   │   ├── gsbu
     │   │   │   ├── hoc
     │   │   │   ├── impt
     │   │   │   ├── imr
     │   │   │   ├── imrc
     │   │   │   ├── imrcp
     │   │   │   ├── imrd
     │   │   │   ├── imrm
     │   │   │   ├── imrmp
     │   │   │   ├── imrpc
     │   │   │   ├── imrpcp
     │   │   │   ├── imrr
     │   │   │   ├── props
     │   │   │   ├── pta
     │   │   │   ├── ptany
     │   │   │   ├── ptao
     │   │   │   ├── ptaor
     │   │   │   ├── ptar
     │   │   │   ├── ptb
     │   │   │   ├── ptbr
     │   │   │   ├── pte
     │   │   │   ├── ptel
     │   │   │   ├── ptelr
     │   │   │   ├── pter
     │   │   │   ├── ptet
     │   │   │   ├── ptetr
     │   │   │   ├── ptf
     │   │   │   ├── ptfr
     │   │   │   ├── pti
     │   │   │   ├── ptir
     │   │   │   ├── ptn
     │   │   │   ├── ptnd
     │   │   │   ├── ptndr
     │   │   │   ├── ptnr
     │   │   │   ├── pto
     │   │   │   ├── ptoo
     │   │   │   ├── ptoor
     │   │   │   ├── ptor
     │   │   │   ├── pts
     │   │   │   ├── ptsh
     │   │   │   ├── ptshr
     │   │   │   ├── ptsr
     │   │   │   ├── ptypes
     │   │   │   ├── rafc
     │   │   │   ├── rafce
     │   │   │   ├── rafcp
     │   │   │   ├── rcc
     │   │   │   ├── rccp
     │   │   │   ├── rce
     │   │   │   ├── rcep
     │   │   │   ├── rconst
     │   │   │   ├── rcontext
     │   │   │   ├── ren
     │   │   │   ├── rfc
     │   │   │   ├── rfce
     │   │   │   ├── rfcp
     │   │   │   ├── rmc
     │   │   │   ├── rmcp
     │   │   │   ├── rpc
     │   │   │   ├── rpce
     │   │   │   ├── rpcp
     │   │   │   ├── scu
     │   │   │   ├── ssf
     │   │   │   ├── sst
     │   │   │   └── state
     │   │   ├── React-Native
     │   │   │   ├── imrn
     │   │   │   ├── rnc
     │   │   │   ├── rnce
     │   │   │   ├── rncs
     │   │   │   ├── rnpc
     │   │   │   ├── rnpce
     │   │   │   └── rnstyle
     │   │   └── Redux
     │   │       ├── hocredux
     │   │       ├── rcredux
     │   │       ├── redux
     │   │       ├── reduxmap
     │   │       ├── rncredux
     │   │       ├── rxaction
     │   │       ├── rxconst
     │   │       ├── rxreducer
     │   │       └── rxselect
     │   ├── rst-mode
     │   │   ├── autoclass
     │   │   ├── autofunction
     │   │   ├── automodule
     │   │   ├── chapter
     │   │   ├── class
     │   │   ├── code
     │   │   ├── digraph
     │   │   ├── function
     │   │   ├── graph
     │   │   ├── graphviz
     │   │   ├── image
     │   │   ├── inheritance
     │   │   ├── literal_include
     │   │   ├── meta
     │   │   ├── module
     │   │   ├── parsed_literal
     │   │   ├── pause
     │   │   ├── section
     │   │   ├── term
     │   │   ├── title
     │   │   ├── url
     │   │   ├── verbatim
     │   │   └── warning
     │   ├── ruby-mode
     │   │   ├── #
     │   │   ├── =b
     │   │   ├── Comp
     │   │   ├── Enum
     │   │   ├── GLOB
     │   │   ├── all
     │   │   ├── am
     │   │   ├── any
     │   │   ├── app
     │   │   ├── attribute
     │   │   ├── bench
     │   │   ├── bm
     │   │   ├── case
     │   │   ├── cla
     │   │   ├── cls
     │   │   ├── collect
     │   │   ├── dee
     │   │   ├── def
     │   │   ├── deli
     │   │   ├── det
     │   │   ├── dow
     │   │   ├── ea
     │   │   ├── eac
     │   │   ├── eai
     │   │   ├── eav
     │   │   ├── eawi
     │   │   ├── for
     │   │   ├── forin
     │   │   ├── formula
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── inc
     │   │   ├── init
     │   │   ├── inject
     │   │   ├── map
     │   │   ├── mm
     │   │   ├── mod
     │   │   ├── pry
     │   │   ├── r
     │   │   ├── rb
     │   │   ├── red
     │   │   ├── reject
     │   │   ├── rel
     │   │   ├── req
     │   │   ├── rpry
     │   │   ├── rw
     │   │   ├── select
     │   │   ├── str
     │   │   ├── test\ class
     │   │   ├── tim
     │   │   ├── to_
     │   │   ├── tu
     │   │   ├── until
     │   │   ├── upt
     │   │   ├── w
     │   │   ├── when
     │   │   ├── while
     │   │   ├── y
     │   │   └── zip
     │   ├── rust-mode
     │   │   ├── allow
     │   │   ├── allow!
     │   │   ├── assert
     │   │   ├── asserteq
     │   │   ├── case
     │   │   ├── cfg
     │   │   ├── cfg=
     │   │   ├── closure
     │   │   ├── crate
     │   │   ├── deny
     │   │   ├── deny!
     │   │   ├── derive
     │   │   ├── display
     │   │   ├── drop
     │   │   ├── enum
     │   │   ├── eprint
     │   │   ├── eprintln
     │   │   ├── fn
     │   │   ├── fnr
     │   │   ├── fns
     │   │   ├── fnw
     │   │   ├── for
     │   │   ├── from
     │   │   ├── fromstr
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── ifl
     │   │   ├── impl
     │   │   ├── implt
     │   │   ├── let
     │   │   ├── letm
     │   │   ├── lett
     │   │   ├── lettm
     │   │   ├── loop
     │   │   ├── macro
     │   │   ├── main
     │   │   ├── match
     │   │   ├── new
     │   │   ├── pfn
     │   │   ├── pfnr
     │   │   ├── pfns
     │   │   ├── pfnw
     │   │   ├── print
     │   │   ├── println
     │   │   ├── result
     │   │   ├── spawn
     │   │   ├── static
     │   │   ├── struct
     │   │   ├── test
     │   │   ├── testmod
     │   │   ├── trait
     │   │   ├── type
     │   │   ├── union
     │   │   ├── warn
     │   │   ├── warn!
     │   │   ├── while
     │   │   └── whilel
     │   ├── scala-mode
     │   │   ├── app
     │   │   ├── case
     │   │   ├── cc
     │   │   ├── co
     │   │   ├── cons
     │   │   ├── def
     │   │   ├── doc
     │   │   ├── docfun
     │   │   ├── for
     │   │   ├── if
     │   │   ├── ls
     │   │   ├── main
     │   │   ├── match
     │   │   ├── ob
     │   │   ├── throw
     │   │   ├── try
     │   │   └── valueclass
     │   ├── sh-mode
     │   │   ├── args
     │   │   ├── bang
     │   │   ├── case
     │   │   ├── for\ loop
     │   │   ├── function
     │   │   ├── if
     │   │   ├── ife
     │   │   ├── safe-bang
     │   │   ├── script-dir
     │   │   ├── select
     │   │   ├── until
     │   │   └── while
     │   ├── snippet-mode
     │   │   ├── cont
     │   │   ├── elisp
     │   │   ├── field
     │   │   ├── group
     │   │   ├── mirror
     │   │   └── vars
     │   ├── sql-mode
     │   │   ├── column
     │   │   ├── constraint
     │   │   ├── constraint.1
     │   │   ├── create
     │   │   ├── create.1
     │   │   ├── insert
     │   │   └── references
     │   ├── swift-mode
     │   │   ├── available
     │   │   ├── checkversion
     │   │   ├── dispatchafter
     │   │   ├── dispatchasync
     │   │   ├── dispatchmain
     │   │   ├── documentdirectory
     │   │   ├── forcase
     │   │   ├── fori
     │   │   ├── func
     │   │   ├── if
     │   │   ├── initcoder
     │   │   ├── let
     │   │   ├── mark
     │   │   ├── prop
     │   │   ├── sortarrayofstrings
     │   │   ├── trycatch
     │   │   ├── uialertcontroller
     │   │   ├── uicollectionviewdatasource
     │   │   ├── uicollectionviewdelegate
     │   │   ├── uitableviewdatasource
     │   │   ├── uitableviewdelegate
     │   │   ├── uiviewcontrollerlifecycle
     │   │   ├── var
     │   │   └── while
     │   ├── terraform-mode
     │   │   ├── data
     │   │   ├── google
     │   │   │   ├── app_engine_resources
     │   │   │   │   └── google_app_engine_application
     │   │   │   ├── bigquery_resources
     │   │   │   │   ├── google_bigquery_dataset
     │   │   │   │   └── google_bigquery_table
     │   │   │   ├── bigtable_resources
     │   │   │   │   ├── google_bigtable_instance
     │   │   │   │   └── google_bigtable_table
     │   │   │   ├── binary_authorization_resources
     │   │   │   │   ├── google_binary_authorization_attestor
     │   │   │   │   └── google_binary_authorization_policy
     │   │   │   ├── cloud_build_resources
     │   │   │   │   └── google_cloudbuild_trigger
     │   │   │   ├── cloud_composer_resources
     │   │   │   │   └── google_composer_environment
     │   │   │   ├── cloud_functions_resources
     │   │   │   │   └── google_cloudfunctions_function
     │   │   │   ├── compute_engine_resources
     │   │   │   │   ├── google_compute_address
     │   │   │   │   ├── google_compute_attached_disk
     │   │   │   │   ├── google_compute_autoscaler
     │   │   │   │   ├── google_compute_backend_bucket
     │   │   │   │   ├── google_compute_backend_service
     │   │   │   │   ├── google_compute_disk
     │   │   │   │   ├── google_compute_firewall
     │   │   │   │   ├── google_compute_forwarding_rule
     │   │   │   │   ├── google_compute_global_address
     │   │   │   │   ├── google_compute_global_forwarding_rule
     │   │   │   │   ├── google_compute_health_check
     │   │   │   │   ├── google_compute_http_health_check
     │   │   │   │   ├── google_compute_https_health_check
     │   │   │   │   ├── google_compute_image
     │   │   │   │   ├── google_compute_instance
     │   │   │   │   ├── google_compute_instance_from_template
     │   │   │   │   ├── google_compute_instance_group
     │   │   │   │   ├── google_compute_instance_group_manager
     │   │   │   │   ├── google_compute_instance_template
     │   │   │   │   ├── google_compute_interconnect_attachment
     │   │   │   │   ├── google_compute_network
     │   │   │   │   ├── google_compute_network_peering
     │   │   │   │   ├── google_compute_project_metadata
     │   │   │   │   ├── google_compute_project_metadata_item
     │   │   │   │   ├── google_compute_region_autoscaler
     │   │   │   │   ├── google_compute_region_backend_service
     │   │   │   │   ├── google_compute_region_disk
     │   │   │   │   ├── google_compute_region_instance_group_manager
     │   │   │   │   ├── google_compute_route
     │   │   │   │   ├── google_compute_router
     │   │   │   │   ├── google_compute_router_interface
     │   │   │   │   ├── google_compute_router_nat
     │   │   │   │   ├── google_compute_router_peer
     │   │   │   │   ├── google_compute_security_policy
     │   │   │   │   ├── google_compute_shared_vpc_host_project
     │   │   │   │   ├── google_compute_shared_vpc_service_project
     │   │   │   │   ├── google_compute_snapshot
     │   │   │   │   ├── google_compute_ssl_certificate
     │   │   │   │   ├── google_compute_ssl_policy
     │   │   │   │   ├── google_compute_subnetwork
     │   │   │   │   ├── google_compute_subnetwork_iam_binding
     │   │   │   │   ├── google_compute_subnetwork_iam_member
     │   │   │   │   ├── google_compute_subnetwork_iam_policy
     │   │   │   │   ├── google_compute_target_http_proxy
     │   │   │   │   ├── google_compute_target_https_proxy
     │   │   │   │   ├── google_compute_target_pool
     │   │   │   │   ├── google_compute_target_ssl_proxy
     │   │   │   │   ├── google_compute_target_tcp_proxy
     │   │   │   │   ├── google_compute_url_map
     │   │   │   │   ├── google_compute_vpn_gateway
     │   │   │   │   └── google_compute_vpn_tunnel
     │   │   │   ├── container_analysis_resources
     │   │   │   │   └── google_container_analysis_note
     │   │   │   ├── container_engine_resources
     │   │   │   │   ├── google_container_cluster
     │   │   │   │   └── google_container_node_pool
     │   │   │   ├── data_sources
     │   │   │   │   ├── google_active_folder
     │   │   │   │   ├── google_billing_account
     │   │   │   │   ├── google_client_config
     │   │   │   │   ├── google_cloudfunctions_function_data
     │   │   │   │   ├── google_compute_address_data
     │   │   │   │   ├── google_compute_backend_service_data
     │   │   │   │   ├── google_compute_default_service_account
     │   │   │   │   ├── google_compute_forwarding_rule_data
     │   │   │   │   ├── google_compute_global_address_data
     │   │   │   │   ├── google_compute_image_data
     │   │   │   │   ├── google_compute_instance_data
     │   │   │   │   ├── google_compute_instance_group_data
     │   │   │   │   ├── google_compute_lb_ip_ranges
     │   │   │   │   ├── google_compute_network_data
     │   │   │   │   ├── google_compute_region_instance_group
     │   │   │   │   ├── google_compute_regions
     │   │   │   │   ├── google_compute_ssl_policy_data
     │   │   │   │   ├── google_compute_subnetwork_data
     │   │   │   │   ├── google_compute_vpn_gateway_data
     │   │   │   │   ├── google_compute_zones
     │   │   │   │   ├── google_container_cluster_data
     │   │   │   │   ├── google_container_engine_versions
     │   │   │   │   ├── google_container_registry_image
     │   │   │   │   ├── google_container_registry_repository
     │   │   │   │   ├── google_dns_managed_zone_data
     │   │   │   │   ├── google_folder_data
     │   │   │   │   ├── google_iam_policy
     │   │   │   │   ├── google_iam_role
     │   │   │   │   ├── google_kms_secret
     │   │   │   │   ├── google_netblock_ip_ranges
     │   │   │   │   ├── google_organization
     │   │   │   │   ├── google_project_data
     │   │   │   │   ├── google_project_services_data
     │   │   │   │   ├── google_service_account_data
     │   │   │   │   ├── google_service_account_key_data
     │   │   │   │   ├── google_storage_object_signed_url
     │   │   │   │   └── google_storage_project_service_account
     │   │   │   ├── dataflow_resources
     │   │   │   │   └── google_dataflow_job
     │   │   │   ├── dataproc_resources
     │   │   │   │   ├── google_dataproc_cluster
     │   │   │   │   └── google_dataproc_job
     │   │   │   ├── dns_resources
     │   │   │   │   ├── google_dns_managed_zone
     │   │   │   │   └── google_dns_record_set
     │   │   │   ├── endpoints_resources
     │   │   │   │   └── google_endpoints_service
     │   │   │   ├── filestore_resources
     │   │   │   │   └── google_filestore_instance
     │   │   │   ├── gcp_resources
     │   │   │   │   ├── google_billing_account_iam_binding
     │   │   │   │   ├── google_billing_account_iam_member
     │   │   │   │   ├── google_billing_account_iam_policy
     │   │   │   │   ├── google_folder
     │   │   │   │   ├── google_folder_iam_binding
     │   │   │   │   ├── google_folder_iam_member
     │   │   │   │   ├── google_folder_iam_policy
     │   │   │   │   ├── google_folder_organization_policy
     │   │   │   │   ├── google_organization_iam_binding
     │   │   │   │   ├── google_organization_iam_custom_role
     │   │   │   │   ├── google_organization_iam_member
     │   │   │   │   ├── google_organization_iam_policy
     │   │   │   │   ├── google_organization_policy
     │   │   │   │   ├── google_project
     │   │   │   │   ├── google_project_iam_binding
     │   │   │   │   ├── google_project_iam_custom_role
     │   │   │   │   ├── google_project_iam_member
     │   │   │   │   ├── google_project_iam_policy
     │   │   │   │   ├── google_project_organization_policy
     │   │   │   │   ├── google_project_service
     │   │   │   │   ├── google_project_services
     │   │   │   │   ├── google_project_usage_export_bucket
     │   │   │   │   ├── google_resource_manager_lien
     │   │   │   │   ├── google_service_account
     │   │   │   │   ├── google_service_account_iam_binding
     │   │   │   │   ├── google_service_account_iam_member
     │   │   │   │   ├── google_service_account_iam_policy
     │   │   │   │   └── google_service_account_key
     │   │   │   ├── iot_core
     │   │   │   │   └── google_cloudiot_registry
     │   │   │   ├── key_management_service_resources
     │   │   │   │   ├── google_kms_crypto_key
     │   │   │   │   ├── google_kms_crypto_key_iam_binding
     │   │   │   │   ├── google_kms_crypto_key_iam_member
     │   │   │   │   ├── google_kms_key_ring
     │   │   │   │   ├── google_kms_key_ring_iam_binding
     │   │   │   │   ├── google_kms_key_ring_iam_member
     │   │   │   │   └── google_kms_key_ring_iam_policy
     │   │   │   ├── pubsub_resources
     │   │   │   │   ├── google_pubsub_subscription
     │   │   │   │   ├── google_pubsub_subscription_iam_binding
     │   │   │   │   ├── google_pubsub_subscription_iam_member
     │   │   │   │   ├── google_pubsub_subscription_iam_policy
     │   │   │   │   ├── google_pubsub_topic
     │   │   │   │   ├── google_pubsub_topic_iam_binding
     │   │   │   │   ├── google_pubsub_topic_iam_member
     │   │   │   │   └── google_pubsub_topic_iam_policy
     │   │   │   ├── redis_resources
     │   │   │   │   └── google_redis_instance
     │   │   │   ├── runtimeconfig_resources
     │   │   │   │   ├── google_runtimeconfig_config
     │   │   │   │   └── google_runtimeconfig_variable
     │   │   │   ├── service_networking_resources
     │   │   │   │   └── google_service_networking_connection
     │   │   │   ├── source_repositories_resources
     │   │   │   │   └── google_sourcerepo_repository
     │   │   │   ├── spanner_resources
     │   │   │   │   ├── google_spanner_database
     │   │   │   │   ├── google_spanner_database_iam_binding
     │   │   │   │   ├── google_spanner_database_iam_member
     │   │   │   │   ├── google_spanner_database_iam_policy
     │   │   │   │   ├── google_spanner_instance
     │   │   │   │   ├── google_spanner_instance_iam_binding
     │   │   │   │   ├── google_spanner_instance_iam_member
     │   │   │   │   └── google_spanner_instance_iam_policy
     │   │   │   ├── sql_resources
     │   │   │   │   ├── google_sql_database
     │   │   │   │   ├── google_sql_database_instance
     │   │   │   │   ├── google_sql_ssl_cert
     │   │   │   │   └── google_sql_user
     │   │   │   ├── stackdriver_logging_resources
     │   │   │   │   ├── google_logging_billing_account_exclusion
     │   │   │   │   ├── google_logging_billing_account_sink
     │   │   │   │   ├── google_logging_folder_exclusion
     │   │   │   │   ├── google_logging_folder_sink
     │   │   │   │   ├── google_logging_organization_exclusion
     │   │   │   │   ├── google_logging_organization_sink
     │   │   │   │   ├── google_logging_project_exclusion
     │   │   │   │   └── google_logging_project_sink
     │   │   │   ├── stackdriver_monitoring_resources
     │   │   │   │   ├── google_monitoring_alert_policy
     │   │   │   │   ├── google_monitoring_group
     │   │   │   │   ├── google_monitoring_notification_channel
     │   │   │   │   └── google_monitoring_uptime_check_config
     │   │   │   └── storage_resources
     │   │   │       ├── google_storage_bucket
     │   │   │       ├── google_storage_bucket_acl
     │   │   │       ├── google_storage_bucket_iam_binding
     │   │   │       ├── google_storage_bucket_iam_member
     │   │   │       ├── google_storage_bucket_iam_policy
     │   │   │       ├── google_storage_bucket_object
     │   │   │       ├── google_storage_default_object_access_control
     │   │   │       ├── google_storage_default_object_acl
     │   │   │       ├── google_storage_notification
     │   │   │       ├── google_storage_object_access_control
     │   │   │       └── google_storage_object_acl
     │   │   ├── locals
     │   │   ├── module
     │   │   ├── output
     │   │   ├── provider
     │   │   ├── resource
     │   │   ├── terraform
     │   │   └── variable
     │   ├── text-mode
     │   ├── tuareg-mode
     │   │   ├── assert
     │   │   ├── docstring
     │   │   ├── for
     │   │   ├── fun
     │   │   ├── guard
     │   │   ├── ifthen
     │   │   ├── ifthenelse
     │   │   ├── let
     │   │   ├── list_comprehension
     │   │   ├── main
     │   │   ├── match
     │   │   ├── module
     │   │   ├── open
     │   │   ├── printf
     │   │   ├── rec
     │   │   ├── try
     │   │   ├── type
     │   │   ├── type_type
     │   │   ├── val
     │   │   └── while
     │   ├── typerex-mode
     │   ├── typescript-mode
     │   ├── udev-mode
     │   │   ├── ENV
     │   │   ├── GOTO
     │   │   ├── KERNEL
     │   │   ├── add
     │   │   ├── env$
     │   │   └── run
     │   ├── web-mode
     │   └── yaml-mode
     │       ├── entry
     │       ├── list
     │       └── section
     ├── yasnippet-snippets-autoloads.el
     ├── yasnippet-snippets-pkg.el
     ├── yasnippet-snippets.el
     └── yasnippet-snippets.elc

     131 directories, 1920 files
     #+end_example

**** DONE snippet modes that look useful to me
     - State "DONE"       from              [2020-03-12 Thu 21:08]
     - org mode
     - python mode
     - sh mode

**** DOING read yasnippet docs
     - State "DOING"      from              [2020-03-10 Tue 21:59]
     Prefer [[https://github.com/joaotavora/yasnippet#use-yas-minor-mode-on-a-per-buffer-basis][per-mode configuration]] over global mode.

     It looks like I also [[https://github.com/joaotavora/yasnippet#where-are-the-snippets][want yasnippets-snippets]]

***** DONE [[http://joaotavora.github.io/yasnippet/snippet-organization.html][organizing snippets]]
     - State "DONE"       from              [2020-03-10 Tue 21:58]

      according to the docs [[http://joaotavora.github.io/yasnippet/snippet-organization.html#org10ee311][yas-snippet-dirs default]] takes into account both a personal snippet dir, and the bundled snippets.
      so no need for me to over ride that one

***** DONE [[http://joaotavora.github.io/yasnippet/snippet-expansion.html][expanding snippets]]
      - State "DONE"       from              [2020-03-10 Tue 21:59]
      I can expand a mode specific snippet via =C-c & C-s=

***** [[http://joaotavora.github.io/yasnippet/snippet-development.html][writing snippets]]

***** [[http://joaotavora.github.io/yasnippet/snippet-menu.html][yasnippet menu]]

***** [[http://joaotavora.github.io/yasnippet/faq.html][FAQ]]

***** [[http://joaotavora.github.io/yasnippet/snippet-reference.html][Reference]]

**** DONE what yasnippets config did I used to have?

     - State "DONE"       from              [2020-03-10 Tue 21:59]
     [[file:jeff-classic-init.el::(use-package%20yasnippet][here it is]]

     it looks pretty vanilla; just with =yas-global-mode= seems a bit questionable to me.

*** DONE Get a working eshell
    - State "DONE"       from "DOING"      [2020-02-03 Mon 19:13]
    - State "DOING"      from              [2019-09-02 Mon 22:09]

    Well, it appears that my [[https://github.com/jmccarrell/literate-emacs.d/blob/master/jeff-emacs-config.org#reduce-startup-time-for-zsh][hack to disable reading init files for zsh]] has had the side effect of making
    zsh be an effective shell for eshell.  Huzzah!

    That apparently also has the benefit that I can now start to work through the eshell

     - [X] Explore the three shell modes in the play emacs like an instrument video ([[file:///Users/jeff/Downloads/emacs-videos/Play Emacs like an instrument.mp4][local copy]])
       - it looks like Alain was using eshell mostly
     - [ ] and there is Howards Introduction to Eshell ([[file:/Users/jeff/Downloads/emacs-videos/Introduction%20to%20EShell.mp4][local copy]])
       - and the [[http://www.howardism.org/Technical/Emacs/eshell-present.html][notes to the talk]]

**** evaluate better shell

     - [[https://github.com/zamansky/using-emacs/blob/master/myinit.org#better-shell][Zamansky uses it?]]

** DEFERRED Install Essential Packages
   - State "DEFERRED"   from              [2020-02-01 Sat 18:46] \\
     these will not be needed until much later.
*** Tier 2: Maybe, Consider These

    Packages that I most likely want to keep, but which need some investigation to validate:

    - undo-tree

    - flycheck

    - elpy
      - python programming mode from Howard
      - check it out

    - yaml-mode

    - visual-regexp

    - I would like to consider [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]]

    - ox-twbs
      - twitter bootstrap rendering of generated org mode files

    - avy

    - jedi from Howards config

    - imenu-anywhere

    - Howards font size increase/decrease functions

    - superword mode?  jwm::comment-region, jwm::c-ifdef-region?

    #+BEGIN_SRC emacs-lisp :tangle no
      (defun jwm::prog-mode-hook ()
        (superword-mode t))
      (add-hook 'prog-mode-hook #'jwm::prog-mode-hook)
    #+END_SRC

    - maybe: yasnippet

* Open Questions
** tabs not working?

   Tabs; it looks like my tab-wdith setting is not taking effect
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq tab-width 2)
   #+END_SRC

* Resources
** good literate configs to read, and selectively pick from
   - State "DOING"      from              [2019-07-21 Sun 16:12]
*** [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::#+TITLE:%20Emacs%20Configuration%20File%20#+AUTHOR:%20Howard%20Abrams%20#+EMAIL:%20howard.abrams@gmail.com][Howards config]]
*** [[file:/t/emacs-configs/sacha-chua-dotemacs/Sacha.org][Sachas config]]
*** [[https://github.com/munen/emacs.d/#where-ivy-doesnt-work-well][munens config]]
 - pull the 'use dumb term in zsh' so emacs shell can run zsh for me, just without colors
*** [[https://github.com/SirPscl/emacs.d][SirPscl/emacs.d]]
 - munen references this config as a good example as well
 - I like the keyboard hints he has at the top of his config as well
