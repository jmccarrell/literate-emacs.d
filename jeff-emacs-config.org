#+TITLE: Emacs Configuration
#+AUTHOR: Jeff McCarrell
#+EMAIL: jeff@mccarrell.org
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp  :tangle "init.el"

* Working Notes
** To Be Done
*** Next steps
    - [ ] on vega, reinstall links to emacs for os x in /Applications
      - and thus deprecate brew installed emacs
    - OR
      - learn how to make my own variant of the brew recipe and build my own emacs using homebrew.
      - [[https://docs.brew.sh/FAQ#can-i-edit-formulae-myself][according to this]] it is as simple as =brew edit emacs=
      - so try it
**** brew edit emacs

     so the simple approach failed.  So follow [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Emacs%20Executable][Howards recipe]]
     well, that failed as well.

     So try [[https://www.reddit.com/r/emacs/comments/bhjtf9/now_that_homebrew_has_removed_build_options_how/eltiaj4?utm_source=share&utm_medium=web2x][another recipe]]
     I found that emacs 27 had a strange and long delay when using swiper.

     So back to emacs 26 installed by brew.

*** Goals to Achieve

    - [X] how to use projectile to navigate between projects as I so often want to do
      - between notes and work projects specifically
    - to support jq literate programming to solve some of the salt challenges I have at work
    - enable tramp mode
    - [X] create support for bash execution in org babel sections
      - ie literate programming using bash at the shell

*** Todo Eventually

    - use [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::(use-package%20whitespace%20:bind%20("C-c%20T%20w"%20.%20whitespace-mode)][Howards whitespace mode]]
    - experiment with [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::(use-package%20fill%20:bind%20(("C-c%20T%20f"%20.%20auto-fill-mode)][Howards fill-mode]]
    - I think I want [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::Unfilling%20a%20paragraph%20joins%20all%20the%20lines%20in%20a%20paragraph%20into%20a%20single%20line.%20Taken%20from%20%5B%5Bhttp://www.emacswiki.org/UnfillParagraph%5D%5Bhere%5D%5D.][unfill paragraph]]
    - [[file:/t/emacs-configs/howardabrams-dot-files/emacs-fixes.org::I%20rarely%20want%20to%20kill%20any%20buffer%20but%20the%20one%20I'm%20looking%20at.%20#+BEGIN_SRC%20elisp%20(global-set-key%20(kbd%20"C-x%20k")%20'kill-this-buffer)%20(global-set-key%20(kbd%20"C-x%20K")%20'kill-buffer)%20#+END_SRC][kill this buffer]]
    - adopt Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::*Dash][interface to dash]]

*** maybe explore these

    Howard has a bunch of _Technical Artifacts_ sections

    - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-fixes.org::*Technical%20Artifacts][emacs-fixes]]
    - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Technical%20Artifacts][emacs.org]]
    - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::*Technical%20Artifacts][emacs-mac.org]]

    Consider reading these for the insights they may contain

    Howard has a bunch of [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Font%20Settings][font choices]]. But I don't know how he possibly installs these fonts. So stick with
    Monaco for the short term. Well, now I know a bit more about installing fonts. At least, installing
    Hack.

    Here is where [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::(if%20(eq%20system-type%20'darwin)%20(require%20'init-mac)%20(require%20'init-linux))][Howard chooses between his mac and linux configurations]]

** Install Essential Packages
*** Tier 2: Maybe, Consider These

    - [X] Consider swapping out my default emacs config for this new one.

    - [X] Turn off all disabled emacs commands; follow Howards config there.

    Packages that I most likely want to keep, but which need some investigation to validate:

    - [X] babel
      - enough to support shell
      - and particularly iterating on jq recipes
      - from Daniel Mai

    - js2-mode
    - terraform-mode

    - [X] crux
      - which of these functions do I actually use?
        - rename buffer and file every once in a while
      - yes, probably add this back in

    - expand-region

    - flycheck

    - elpy
      - python programming mode from Howard
      - check it out

    - yaml-mode

    - undo-tree
    - visual-regexp

    - I would like to consider [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]]

    - company
      - do I use this now?  I am not really sure
      - is this compatible with ivy, swiper, counsel?
      - I don't think so.
      - I think company and counsel are both completion frameworks

    - ox-twbs
      - twitter bootstrap rendering of generated org mode files

    - avy

    - jedi from Howards config

    - imenu-anywhere

    - Howards font size increase/decrease functions

    - superword mode?  jwm::comment-region, jwm::c-ifdef-region?

    #+BEGIN_SRC emacs-lisp :tangle no
      (defun jwm::prog-mode-hook ()
        (superword-mode t))
      (add-hook 'prog-mode-hook #'jwm::prog-mode-hook)
    #+END_SRC

*** Tier 3: Drop These in this Refactor
**** not used enough

     - key-chord
     - macro-step
     - rbenv
     - robe
     - scala-mode
     - winner
       - replace with eyebrowse?

**** packages I never use

     - bats-mode
     - bookmark
     - psession
       - https://github.com/thierryvolpiatto/psession
     - try
     - wgrep
     - yasnippet
     - ztree

** Pending Work To Do

   - figure out how to get bookmarks? to open file: references in org files defined by org-store-link
   - [X] investigate helm-occur as a replacement for isearch and/or swiper
     - no, I decided to use =swiper= for =C-s=
   - =exec-path-from-shell=
     - Daniel has an example
     - I've seen this elsewhere as well
   - Daniel has some interesting [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Open%20other%20apps%20from%20Emacs][open in other apps functions]] I would like to investigate as well
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*List%20buffers][ibuffer?]]
   - investigate package recentf
   - Daniel has a nice example [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Installation][passing an emacs-lisp variable into a shell]] buffer to execute
     - and a [[file:/t/emacs-configs/danielmai-dotemacs/config.org::#+begin_src%20emacs-lisp%20(use-package%20exec-path-from-shell%20:ensure%20t%20:init%20(exec-path-from-shell-initialize))%20#+end_src][link to an info buffer in emacs]]
   - [ ] Daniels [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Org%20babel%20languages][org-babel config]] looks good for my use case
     - [ ] and this [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Org%20templates][org-structure-template-alist stuff]]
   - [X] consider moving my old revert-buffer binding from =C-x y= to =C-c u= per Daniel
   - consider creating an auth-source thing as [[file:/t/emacs-configs/danielmai-dotemacs/config.org::(use-package%20auth-source%20:config%20(customize-set-variable%20'auth-sources%20'((:source%20"~/.authinfo.gpg"))))][Daniel]] and IIRC jwiegley do
   - [X] consider setting up abo-abo's ace-window
     - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Ace%20Window][Daniels use of it]]
   - Daniel uses
     - helm
     - and ivy, swiper, counsel
     - and avy
   - Daniels config for [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Multiple%20cursors][multiple cursors]]
   - Figure out why [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Yasnippet][Daniel likes yasnippets]]
   - [X] [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*json-mode][json-mode]]
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*terminal-here][terminal here?]]
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*go-mode][Daniel's go-mode]]
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*C/Java][more sane C/java brace handling via Daniel]]
   - here is how Daniel distinguishes between packages he gets from elpa vs [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Non-ELPA%20packages][local site-lisp]]
   - how Daniel starts [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Emacsclient][emacs server for emacsclient]]

** Open Questions

   Tabs; it looks like my tab-wdith setting is not taking effect
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq tab-width 2)
   #+END_SRC

* Introduction
** About This File

   After many years of emacs evolution via hunting and pecking, I finally refactored my existing emacs init
   setup in the literate style. I have previously and continue to follow the lead of many fine emacs
   devotees, among them:

   - [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#my-directory-location][Howard Abrams]]
   - [[https://github.com/sachac/.emacs.d][Sacha Chua]]
   - [[https://github.com/danielmai/.emacs.d][Daniel Mai]]
   - [[https://www.wisdomandwonder.com/tag/emacs][Grant aka Wisdom and Wonder]]
   - [[https://github.com/jwiegley/dot-emacs][John Weigley]]
   - [[https://github.com/purcell/emacs.d][Steve Purcell]]
   - [[https://github.com/abo-abo/oremacs][abo-abo]]
   - and many others

   To all of these contributors, I doff my cap in salute. Your published work has inspired and -- to be honest
   -- at times terrified me as I have contemplated cutting and splicing together these various styles in search
   of my own.

   I would also like to publicly acknowledge certain emacs contributors of the YouTube genre, among them:

   - [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Ranier KÃ¶nig]]
   - [[https://www.youtube.com/channel/UClT2UAbC6j7TqOWurVhkuHQ][Sacha Chua]]
   - [[https://www.youtube.com/playlist?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg][Mike Zamansky]]
   - [[https://www.youtube.com/user/howardabrams/videos][Howard Abrams]]
   - [[https://www.youtube.com/playlist?list=PL0sMmOaE_gs3GbuZV_sNjwMREw9rfElTV][John Kitchen]]
   - [[https://www.youtube.com/channel/UCCRdRbI93UGW0AZttVH3SbA/feed][Daniel Gopar]]

   I have drawn inspiration to adopt new ways of doing some very old tricks from these fine folks.

   In this refactor, I have the following major goals:

   - use the literate programming style
     - learn babel and tangle in the process
   - learn more emacs-lisp; even become competent?
   - add ivy and swiper in addition to helm

   as well as a host of smaller, clean-up type goals.

* Record Startup Timing

  Record the elapsed time of starting up emacs.

  My /classic/ configuration took about 2.1 seconds to load.

  #+BEGIN_SRC emacs-lisp
    (defconst emacs-start-time (current-time))

    (unless noninteractive
      (message "Loading %s..." load-file-name))
  #+END_SRC

* General Settings
** Emacs Directories

   I prefer Howard's style of [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#my-directory-location][defining where to store eveything]], so I shamelessly stole it.

   #+BEGIN_SRC emacs-lisp
     (defconst jwm/emacs-directory (concat (getenv "HOME") "/.emacs.d"))

     (defun jwm/emacs-subdirectory (d) (expand-file-name d jwm/emacs-directory))

     ;; initialize some directories if needed
     (let* ((subdirs '("elisp" "backups"))
            (fulldirs (mapcar (lambda (d) (jwm/emacs-subdirectory d)) subdirs)))
       (dolist (dir fulldirs)
         (when (not (file-exists-p dir))
           (message "Make directory: %s" dir)
           (make-directory dir))))
   #+END_SRC

** Custom Settings

   Explicitly store and load my custom settings.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "settings.el" jwm/emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file t))
   #+END_SRC

** Helpful Predicates

   Some useful predicates in customization...

   #+BEGIN_SRC emacs-lisp
      (defun jwm/mac-p ()
        (and (eq 'ns (window-system))
             (eq 'darwin system-type)))

      (defun jwm/personal-mac-p ()
        (and (jwm/mac-p)
             (file-exists-p "/j/pdata/.gitignore")))

      (defun jwm/sift-mac-p ()
        (and (jwm/mac-p)
             (file-exists-p (expand-file-name "~/code/java/build.gradle"))))
   #+END_SRC

** Modernizing Emacs

   Another section I lifted [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#modernizing-emacs][straight from Howard]].  This is his text.

   With a long history of working on small machines without gigabytes
   of RAM, we might as well let Emacs be the beast it has always
   dreamed.

   First, letâs increase the cache before starting garbage collection:
   #+BEGIN_SRC elisp
     (setq gc-cons-threshold 50000000)
   #+END_SRC

   Found [[https://github.com/wasamasa/dotemacs/blob/master/init.org#init][here]] how to remove the warnings from the GnuTLS library when
   using HTTPS... increase the minimum prime bits size:
   #+BEGIN_SRC elisp
     (setq gnutls-min-prime-bits 4096)
   #+END_SRC

** Personal Information

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Jeff McCarrell"
           user-mail-address (cond
                              ((jwm/sift-mac-p) "jmccarrell@siftscience.com")
                              (t "jeff@mccarrell.org")))
   #+END_SRC
* Package Initialization
** Package Manager

   Ensure the org repository and melpa are searched for packages.

   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (unless (assoc-default "org" package-archives)
       (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

     (package-initialize)
   #+END_SRC

   Use =M-x package-refresh-contents= to reload the list of packages as needed.

** Use-Package

   Prefer [[https://github.com/jwiegley/use-package][use-package]] more or less as a more convenient way of customizing emacs. It does a whole lot more
   than that. My usage is fairly shallow.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (setq use-package-verbose t)
     (setq use-package-always-ensure t)

     (require 'use-package)
   #+END_SRC

** Howard's Recommended Emacs Lisp Libs

   Again [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#init-file-support][following Howard here]]. Add in these supporting libraries to ease emacs lisp development. [[https://github.com/magnars/dash.el][dash]] for a
   modern list api, [[https://github.com/magnars/s.el][s]] for string manipulation, and [[https://github.com/rejeep/f.el][f]] for file manipulation. Also load in =cl= as other
   packages may depend on it.

   #+BEGIN_SRC emacs-lisp
     (require 'cl)

     (use-package dash
       :config (eval-after-load "dash" '(dash-enable-font-lock)))

     (use-package s)

     (use-package f)
   #+END_SRC

* Variables
** Prefer Minimal Emacs

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     ;; needed for emacs23
     (setq inhibit-splash-screen t)
     (setq initial-scratch-message "")

     ;; Don't beep at me
     (setq visible-bell t)

     ;; get rid of all of the backup files
     (setq backup-before-writing nil)
     (setq make-backup-files nil)

     ;; screen real estate is for text, not widgets
     (when (window-system)
       (tool-bar-mode 0)
       (when (fboundp 'horizontal-scroll-bar-mode)
         (horizontal-scroll-bar-mode -1))
       (scroll-bar-mode -1))
   #+END_SRC

** Prefer utf8 Everywhere

   Follow Grant's [[https://www.wisdomandwonder.com/article/10775/emacsorg-mode-how-to-probably-configure-everything-for-utf-8-in-emacs][lead here]]

   #+BEGIN_SRC emacs-lisp
     ;; prefer utf-8 encoding in all cases.
     (let ((lang 'utf-8))
       (set-language-environment lang)
       (prefer-coding-system lang))
   #+END_SRC

** Tabs

   I prefer spaces over tabs in all cases.  [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][Source]]

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 2)
   #+END_SRC

   Tab for competion is wired deeply into my emacs-fingers.

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-always-indent 'complete)
   #+END_SRC

** Line Wrapping

   In general, I prefer to see the entire line of text in the window even when it is wider than the frame.
   Thus I prefer [[info:emacs#Visual%20Line%20Mode][Visual Line Mode]].  And, in general, I want emacs to wrap my text for me.  I chose 108 as a
   relatively arbitrary line width value that works well for me.  Hollerith cards are dead!  Long live
   Hollerith cards.

   #+BEGIN_SRC emacs-lisp
     ;; Hollerith cards have had their day. Norming to 80 characters seems like a poor use of screen real estate
     ;; to me. I can't form a particular argument for 108, other than: it larger than 72 and seems to fit better.
     (setq-default fill-column 108)
     (auto-fill-mode)
     (global-visual-line-mode)
     (diminish 'visual-line-mode)
   #+END_SRC

** Other Misc Settings

   Various settings I have come to prefer over the years.

   #+BEGIN_SRC emacs-lisp
     ;; always end a file with a newline
     (setq require-final-newline t)

     ;; delete the region when typing, just like as we expect nowadays.
     (delete-selection-mode t)

     ;; highlight the matching parenthesis
     (show-paren-mode t)

     ;; Answering just 'y' or 'n' will do
     (defalias 'yes-or-no-p 'y-or-n-p)

     ;; revert buffers automatically when underlying files are changed externally
     (global-auto-revert-mode t)

     ;; no disabled functions
     (setq disabled-command-function nil)

   #+END_SRC

* Display Settings
** Color Theme

   After much experimentation, I have come to prefer zenburn. Over the years, I have used my own color theme,
   which I used to be quite proud of, and then solarized. Now I have come to prefer zenburn. It works well in
   the terminal as well.

   Here is how Sacha overrides and [[file:/t/emacs-configs/sacha-chua-dotemacs/Sacha.org::(defun%20my/setup-color-theme%20()%20(interactive)%20(when%20(display-graphic-p)%20(color-theme-solarized))%20(set-background-color%20"black")%20(set-face-foreground%20'secondary-selection%20"darkblue")%20(set-face-background%20'secondary-selection%20"lightblue")%20(set-face-background%20'font-lock-doc-face%20"black")%20(set-face-foreground%20'font-lock-doc-face%20"wheat")%20(set-face-background%20'font-lock-string-face%20"black"))%20(use-package%20color-theme-solarized%20:config%20(my/setup-color-theme))][customizes her use of solarized]].

   #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :init (load-theme 'zenburn t))
   #+END_SRC

** Font

   I prefer a little bigger (14 point) font on my personal laptop, especially on my large monitor at home.

   Here is how [[https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_font.el#L7-L33][Xah Lee sets his frame font]]

   And a 2019 [[https://www.wisdomandwonder.com/text/12298/choosing-a-monospace-font-2019-march#more-12298][blog post]] comparing fonts that led me to the font [[https://github.com/source-foundry/Hack][Hack]].  Install Hack via homebrew:

   #+BEGIN_SRC shell
     brew cask install caskroom/fonts/font-hack
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun jwm/font-exists-p (f)
       (and (window-system)
            (member f (font-family-list))))

     (when (window-system)
       (let ((preferred-font
              (cond
               ((and (jwm/font-exists-p "Hack") (jwm/mac-p)) "Hack-14")
               (t "Monaco-12"))))
           (message "setting Jeff preferred font %s" preferred-font)
           (set-frame-font preferred-font t t)))
   #+END_SRC

** Whitespace Mode

   This is another [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#whitespace-mode][copy and paste from Howard]]. It makes it easier to see whitespace when necessary.

   #+BEGIN_SRC emacs-lisp
     (use-package whitespace
       :bind ("C-c T w" . whitespace-mode)
       :init
       (setq whitespace-line-column nil
             whitespace-display-mappings '((space-mark 32 [183] [46])
                                           (newline-mark 10 [9166 10])
                                           (tab-mark 9 [9654 9] [92 9])))
       :config
       (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
       (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
       (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
       :diminish whitespace-mode)
   #+END_SRC

* Window Movement

  I prefer ace-window

  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :bind (("M-o" . ace-window))
      :config
      (setq aw-dispatch-always t)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  #+END_SRC

* Key Bindings
** Option and Command Modifier Keys on a Mac

   Howard maps option and command to different emacs key symbols to allow him that many more possible key
   bindings. Like this:

   #+BEGIN_SRC emacs-lisp :tangle no
     (setq mac-option-modifier 'meta)
     (setq mac-command-modifier 'super)
   #+END_SRC

   And I did much the same thing.  However, I think I prefer to keep meta closest to the space bar.

   I leave right-option for the OS X combiner keys, like â from right-option v.

   And I prefer to switch between emacs frames using the standard mac gesture Command-`

   #+BEGIN_SRC emacs-lisp
     (when (jwm/mac-p)
       (setq mac-command-modifier 'meta)
       (setq mac-option-modifier 'super)
       (setq mac-right-option-modifier 'none)

       ;; mirror the mac user gesture for switching frames
       (bind-key "M-`" 'other-frame)

       ;; prevent my thumb from triggering this menu on the trackpad when in open laptop mode
       ;;  ie, when I am working on the train
       (bind-key [C-down-mouse-1] 'ignore))
   #+END_SRC

** Global Key Bindings

   I really like Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Key%20Bindings][global key binding approach]], which leverages John Wiegley's [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]] that is part
   of [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][use-package]].

   Recall that there are several /power/ features of =bind-key=, such as rebinding, adding keys to a
   specific map etc. Here are John's [[https://github.com/jwiegley/use-package/blob/master/bind-key.el#L41-L90][pointers]] in the comments of the package.

   #+BEGIN_SRC emacs-lisp
     (bind-keys
      ;; long time bindings I have preferred
      ("C-c u" . revert-buffer)
      ("C-M-g" . goto-line)

      ;; perhaps turn these on when/if I bring in Howards font size functions
      ;; ("s-C-+" . ha/text-scale-frame-increase)
      ;; ("A-C-+" . ha/text-scale-frame-increase)
      ;; ("s-C-=" . ha/text-scale-frame-increase)
      ;; ("A-C-=" . ha/text-scale-frame-increase)
      ;; ("s-C--" . ha/text-scale-frame-decrease)
      ;; ("A-C--" . ha/text-scale-frame-decrease)
      )
   #+END_SRC

** which-key

   I have come to appreciate the exploration of the key maps that [[https://github.com/justbur/emacs-which-key][which-key]] enables.

   Howard extensively [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#displaying-command-sequences][customizes the display of which-key]]. I find that interesting, and maybe something to
   pursue one day.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       :diminish which-key-mode
       :config

       ;; prefer to show the entire command name with no truncation.
       ;;  some of those projectile command names exceed the default value of 27, eg
       ;;  projectile-toggle-between-implementation-and-test
       (setq which-key-max-description-length nil)
       (which-key-mode 1))
   #+END_SRC

* Search
** ag

   #+BEGIN_SRC emacs-lisp
     ;; ag config derived from danielmai's config
     (use-package ag
       :commands ag)
   #+END_SRC

* Former Swiper Helm Projectile

  I choose to pattern my config for these related packages after abo-abo, the author.  Well, it turns out
  abo-abo has a pretty baroque way of loading his configuration.

  So model after the [[https://github.com/bbatsov/emacs.d/blob/master/init.el#L538-L572][approach used by bbatsov]].

  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package projectile
      :init
      (setq projectile-completion-system 'ivy)
      :config
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1))

    (use-package swiper
      :config
      (global-set-key "\C-s" 'swiper))
  #+END_SRC

** former config now discarded

 I have some questions about completion and file searching.  So disable =counsel-projectile= for now to
 reduce the surface area to search for answers in.

 #+BEGIN_SRC emacs-lisp :tangle no
   (use-package counsel-projectile
     :config
     (counsel-projectile-mode))
 #+END_SRC

* Helm, Ivy, Swiper and Projectile

** Helm Config

  Look at how Howard, Sacha and Daniel Mai configure helm
  - [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Helm][Howard's config]]
    - Howard is not a regular user of helm.  He does have some good hints in there though.
  - [[file:/t/emacs-configs/sacha-chua-dotemacs/Sacha.org::*Helm%20-%20interactive%20completion][Sacha's config]]
    - Sacha has a reasonable helm config that I could base mine off of.
  - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Helm][Daniel's config]]
    - Daniel configures [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Locate][helm-locate to use mdfind]], aka Spotlight
    - Daniel has a nice reasonable config that I could benefit from
  - [[file:jeff-classic-init.el::;;%20helm%20config%20derived%20from%20danielmai's%20config][My classic config]]
    - Looks like I based my former config on Daniels config.
    - So pick some blend of Daniel and Sacha's work to move forward here.

  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :diminish helm-mode
      :bind (("C-c h" . helm-command-prefix)
             ("C-x b" . helm-mini)
             ("C-`" . helm-resume)
             ("M-x" . helm-M-x)
             ("C-x C-f" . helm-find-files)
             ("C-x C-r" . helm-recentf))
      :init
      (require 'helm-config)
      :config
      (setq helm-locate-command "mdfind -interpret -name %s %s"
            helm-ff-newfile-prompt-p nil
            helm-M-x-fuzzy-match t)
      (helm-mode))
    (use-package helm-projectile
      :after helm-mode
      :commands helm-projectile)
    (use-package helm-ag
      :ensure t
      :after helm-mode)
    (use-package helm-swoop
      :ensure t
      :after helm-mode
      :bind ("s-w" . helm-swoop))
  #+END_SRC

** Projectile Config

   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Projectile][Daneil's projectile config]]
     - looks sane
     - investigate =projectile-switch-project-action=

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :bind-keymap ("C-c p" . projectile-command-map)
       :init
       (setq projectile-completion-system 'ivy)
       :config
       (bind-key "s p" 'helm-do-ag-project-root 'projectile-command-map)
       (bind-key "s a" 'helm-do-ag 'projectile-command-map)
       (projectile-mode +1))
   #+END_SRC

** Ivy and Swiper Config

   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :diminish (ivy-mode . "")
       :config
       (ivy-mode 1)
       ;; add ârecentf-modeâ and bookmarks to âivy-switch-bufferâ.
       (setq ivy-use-virtual-buffers t))

     (use-package swiper
       :config
       (global-set-key "\C-s" 'swiper))
   #+END_SRC

* Programming Support
** crux

   I use bbatsov's [[https://github.com/bbatsov/crux][crux]] at times, especially =C-c n=.

   #+BEGIN_SRC emacs-lisp
     (use-package crux
       :bind
       (
        ("C-c n" . crux-cleanup-buffer-or-region)
        ;; ("C-S-RET" . crux-smart-open-line-above)
        ;; ("M-o" . crux-smart-open-line)
        ("C-c d" . crux-duplicate-current-line-or-region)
        ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
        ("C-c C-r" . crux-rename-file-and-buffer)))
   #+END_SRC

* Git

  I would like to consider [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]] someday.

** Magit

   Indispensible.  One of the two killer apps for emacs IMO.

   Howard does [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Magit][additional customization]] that I should consider someday.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :defer t
       :bind ("C-x g" . magit-status))
   #+END_SRC

* Org
** Org Configuration
*** Org Global Key Bindings

    #+BEGIN_SRC emacs-lisp
      (bind-keys
       ;; org mode wants these default global bindings set up.
       ("C-c l" . org-store-link)
       ("C-c c" . org-capture)
       ("C-c a" . org-agenda)
       ("C-c b" . org-iswitchb))
    #+END_SRC

*** Where to Look for Org Info

    #+BEGIN_SRC emacs-lisp
      ;; I prefer dropbox; too bad my work does not.
      (setq org-directory
            (cond ((jwm/sift-mac-p) "/s/notes/org")
                  (t "~/Dropbox/org")))

      ;; The default place to put notes for capture mode
      (setq org-default-notes-file
            (concat org-directory
                    (cond ((jwm/sift-mac-p) "/sift.org")
                          (t "/todo.org"))))

      ;; my agenda files
      ;;  code shamelessly stolen from Sacha Chua's config
      (setq org-agenda-files
            (delq nil
                  (mapcar (lambda (x) (and (file-exists-p x) x))
                          `("~/Dropbox/org/notes.org",
                            org-default-notes-file))))
    #+END_SRC

*** Templates, Tasks, Refiling

    #+BEGIN_SRC emacs-lisp
      ;; capture template.
      (setq org-capture-templates
            '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
               "* TODO %?\n %t\n  %i\n  %a")
              ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
               "* %?\nEntered on %U\n  %i\n  %a")))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; Jeff task states
      (setq org-todo-keywords
            '((sequence
               "TODO(t)"
               "NEXT(n!)"
               "DOING(g!)"
               "WAITING(w@/!)"
               "|" "DONE(d!)"
               "CANCELLED(c@)"
               "DEFERRED(D@)")))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; I prefer 2 levels of headlines for org refile targets
      ;;  this matches well with my TASKS/PROJECTS high level
      ;; further, I prefer the refiling to be per-buffer, not across all org-agenda-files
      ;;  to preserve context.  most often, I use the file as context.
      (setq org-refile-targets '((nil . (:maxlevel . 2))))
    #+END_SRC

** Save Org Files Periodically

   Stolen from John Weigley.

   #+BEGIN_SRC emacs-lisp
     (defun save-org-mode-files ()
       (dolist (buf (buffer-list))
         (with-current-buffer buf
           (when (eq major-mode 'org-mode)
             (if (and (buffer-modified-p) (buffer-file-name))
                 (save-buffer))))))

     (run-with-idle-timer 25 t 'save-org-mode-files)
   #+END_SRC

** Org babel

   I stole much of this from Daniel Mai

   #+BEGIN_SRC emacs-lisp
     (use-package ob-restclient)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (C . t)
        (calc . t)
        (java . t)
        (ruby . t)
        (lisp . t)
        (scheme . t)
        (shell . t)
        (sqlite . t)
        (js . t)
        (restclient . t)))

     (defun my-org-confirm-babel-evaluate (lang body)
       "Do not confirm evaluation for these languages."
       (not (or (string= lang "C")
                (string= lang "java")
                (string= lang "python")
                (string= lang "emacs-lisp")
                (string= lang "sqlite"))))
     (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
   #+END_SRC

* Programming Support
** js2 and json mode

   I lifted this straight from Howard's config.  Not that I write much javascript

   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :init
       (setq js-basic-indent 2)
       (setq-default js2-basic-indent 2
                     js2-basic-offset 2
                     js2-auto-indent-p t
                     js2-cleanup-whitespace t
                     js2-enter-indents-newline t
                     js2-indent-on-enter-key t
                     js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))
       (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
       (add-to-list 'auto-mode-alist '("\\.es6$" . js2-mode)))

   #+END_SRC

   I spend more time dealing with various blobs of json, so follow the lead of [[http://develop.spacemacs.org/layers/+lang/json/README.html][spacemacs]] for [[https://github.com/joshwnj/json-mode][json-mode]]

   #+BEGIN_SRC emacs-lisp
     (use-package json-mode)
   #+END_SRC

* Report Startup Timing

  I'm pretty sure I got this from John Weigley.

  #+BEGIN_SRC emacs-lisp
    ;;; Post initialization

    (let ((elapsed (float-time (time-subtract (current-time)
                                              emacs-start-time))))
      (message "Loading %s...done (%.3fs)" load-file-name elapsed))

    (add-hook 'after-init-hook
              `(lambda ()
                 (let ((elapsed (float-time (time-subtract (current-time)
                                                           emacs-start-time))))
                   (message "Loading %s...done (%.3fs) [after-init]"
                            ,load-file-name elapsed)))
              t)
  #+END_SRC
