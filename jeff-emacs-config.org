#+TITLE: Emacs Configuration
#+AUTHOR: Jeff McCarrell
#+EMAIL: jeff@mccarrell.org
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp  :tangle "init.el"

* Working Notes
** Pending Work To Do
*** Goals to Achieve

    - [ ] enable tramp mode
      - show it works in important cases, like judgy
      - to get there, I need:
        - eshell mode that works?
    - [ ] to support jq literate programming to solve some of the salt challenges I have at work
    - [ ] can install from a new, clean .emacs.d

*** Next Up

   - [ ] make a links section to these authors' config files
     - both on the web and to my local copies
   - [ ] or maybe work on shell mode?!
   - [ ] setup occur and how it works with swiper
   - [X] NO PREFER EYEBROWSE explore winner mode to manipulate a stack of window configurations
   - explore undo-tree
   - [-] explore the limits of dired mode

*** DOING explore dired mode
    - State "DOING"      from "TODO"       [2019-09-09 Mon 08:11]

    - [X] read the *Help* for dired
    - [X] Zamansky videos
      - [X] Using emacs 38 - dired
        - [[/Users/jeff/Downloads/emacs-videos/Using%20Emacs%2038%20-%20Dired.mp4][local copy]]
        - and the [[https://cestlaz.github.io/posts/using-emacs-38-dired/][blog entry]] which has interesting links by abo-abo and jcs
      - [X] Using emacs 57 - dired narrow
        - [[/Users/jeff/Downloads/emacs-videos/Using%20Emacs%20Episode%2057%20-%20dired-narrow.mp4][local copy]]
    - [ ] what does dired+ add to the picture?
      - [ ] read the dired+ docs
      - A: IDK; I couldn't find a package =dired+=

**** DONE investigate dired-x
     - State "DONE"       from "DOING"      [2019-09-11 Wed 21:27]
     - State "DOING"      from              [2019-09-11 Wed 08:07]
    - [ ] read the manual [[info:dired-x#Top][Dired Extra]]
      - [ ] do any of the emacs folks I follow use dired-x?  A: yes they do.

      #+BEGIN_SRC shell :results output
      find /t/emacs-configs -type f -name \*.el -maxdepth 4 | xargs fgrep -l dired-x
      #+END_SRC

      #+RESULTS:
      : /t/emacs-configs/bbatsov-dotemacs/init.el
      : /t/emacs-configs/jwiegley-dotemacs/init.el
      : /t/emacs-configs/prelude/core/prelude-editor.el
      : /t/emacs-configs/prelude/elpa/async-20170610.2241/dired-async.el
      : /t/emacs-configs/prelude/elpa/magit-20170709.1106/magit.el
      : /t/emacs-configs/prelude/elpa/magit-20170709.1106/magit-diff.el
      : /t/emacs-configs/prelude/elpa/helm-20170709.1054/helm-files.el
      : /t/emacs-configs/abo-abo-dotemacs/modes/ora-dired.el
      : /t/emacs-configs/abo-abo-dotemacs/init.el

      - bbatsov has a nice config

        #+BEGIN_SRC emacs-lisp :tangle no
          (use-package dired
            :config
            ;; dired - reuse current buffer by pressing 'a'
            (put 'dired-find-alternate-file 'disabled nil)

            ;; always delete and copy recursively
            (setq dired-recursive-deletes 'always)
            (setq dired-recursive-copies 'always)

            ;; if there is a dired buffer displayed in the next window, use its
            ;; current subdir, instead of the current subdir of this dired buffer
            (setq dired-dwim-target t)

            ;; enable some really cool extensions like C-x C-j(dired-jump)
            (require 'dired-x))
        #+END_SRC
      - abo-abo has an involved config
      - and a simple one
        #+BEGIN_SRC emacs-lisp :tangle no
          (use-package dired
            :commands dired
            :init
            (setq dired-listing-switches
                  (if (memq system-type '(windows-nt darwin))
                      "-alh"
                      "-laGh1v --group-directories-first")))
          (use-package dired-x
            :commands dired-jump)
        #+END_SRC

    - I definitely want [[info:dired-x#Miscellaneous%20Commands][=dired-jump= and =dired-dump-other-window=]]
    - here is [[info:dired-x#Special%20Marking%20Function][how to write elisp to mark files]] in dired buffer
    - I think I do not want the [[info:dired-x#Find%20File%20At%20Point][=dired-x-find-file=]] stuff

**** DONE read about how abo-abo uses dired

     - State "DONE"       from "DOING"      [2019-09-11 Wed 21:27]
     - State "DOING"      from              [2019-09-11 Wed 08:07]
     - [X] read [[https://oremacs.com/2017/11/18/dired-occur/][abo-abo dired article]]
     - [X] a [[https://oremacs.com/2015/01/10/dired-ansi-term/][2015 article about how he uses ansi-term and dired]]
       - some good stuff about =C-x C-j= and invoking a shell at point, including using tramp to ssh to remote files
     - [X] [[https://oremacs.com/2015/01/12/dired-file-size/][file sizes in dired]]
     - [X] more discussion of [[https://oremacs.com/2015/01/13/dired-options/][his dired switches]]

**** other dired investigations

    - [X] read [[http://irreal.org/blog/?p=6760][jcs dired article]]
      - but apparently I need ivy-occur to make this all work?
    - [ ] read about dired-narrow
      - [ ] the full docs are in [[https://github.com/Fuco1/dired-hacks][dired-hacks]]
    - [ ] learn to make new directories?
    - [ ] move files around within those directories

**** notes

     - One can mark based on regex
     - and invert the selection
       - ie mark all .jpeg files
       - then mark all files in the directory that are not .jpeg files

*** DOING explore [[https://www.gnu.org/software/emacs/manual/html_node/dired-x/Find-File-At-Point.html#Find-File-At-Point][find file at point]]

    - State "DOING"      from              [2019-09-11 Wed 22:49]
    In particular, I would like to be able to find file at point in a given window using =ace-window=

    There is find-file-in-project, which is closely related to ivy.

*** edit filenames inline

    - edit dired inline
    - use =C-x C-q= to edit a filename inline
    - it looks like this is a function provided by dired+, not in stock dired.
    - and with =mc= mark all, one can edit multiple filenames at once.

*** DOING switch to counsel, counsel-projectile [25%]
    - State "DOING"      from              [2019-09-02 Mon 21:50]

    - [X] enable the config
    - [ ] Read [[https://github.com/ericdanan/counsel-projectile][the docs]] to get the basic key bindings down.
    - [ ] set up counsel-rg to use ripgrep
      - on vega
      - on sift mac

**** DOING investigate ivy-push-view
     - State "DOING"      from              [2019-09-02 Mon 20:52]

     [[file:~/.emacs.d/elpa/ivy-20190803.1121/ivy.el::(defun%20ivy-push-view%20(&optional%20arg)][ivy-push-view]] appears to have some basic window layout capture functionality.  And since I am wanting
     to try the whole ivy/counsel combo in preference to helm, lets just do that and try out ivy-push-view
     as part of that refactoring.

*** DOING Get a working eshell
    - State "DOING"      from              [2019-09-02 Mon 22:09]

    Well, it appears that my [[https://github.com/jmccarrell/literate-emacs.d/blob/master/jeff-emacs-config.org#reduce-startup-time-for-zsh][hack to disable reading init files for zsh]] has had the side effect of making
    zsh be an effective shell for eshell.  Huzzah!

    That apparently also has the benefit that I can now start to work through the eshell

     - [X] Explore the three shell modes in the play emacs like an instrument video ([[file:///Users/jeff/Downloads/emacs-videos/Play Emacs like an instrument.mp4][local copy]])
       - it looks like Alain was using eshell mostly
     - [ ] and there is Howards Introduction to Eshell ([[file:/Users/jeff/Downloads/emacs-videos/Introduction%20to%20EShell.mp4][local copy]])
       - and the [[http://www.howardism.org/Technical/Emacs/eshell-present.html][notes to the talk]]

**** evaluate better shell

     - [[https://github.com/zamansky/using-emacs/blob/master/myinit.org#better-shell][Zamansky uses it?]]

*** DONE explore smex
    - State "DONE"       from "TODO"       [2019-09-09 Mon 07:55]

    - [X] read the smex docs
      - [[http://github.com/nonsequitur/smex/blob/master/README.markdown][github README]]
      > Smex is a M-x enhancement for Emacs. Built on top of Ido, it provides a convenient interface to your
      recently and most frequently used commands. And to all the other commands, too.
    - [X] does abo-abo use smex in his configuration?
      - A: [[file:/t/emacs-configs/abo-abo-dotemacs/init.el::(let%20((file-name-handler-alist%20nil))%20(require%20'eclipse-theme)%20(load-theme%20'eclipse%20t)%20(require%20'use-package)%20(require%20'smex))][he loads it]], but doesn't appear to configure it
    - so I don't think smex is going to work for me with counsel
    - there is helm-smex though, so I could have smex if I went back to helm it appears

*** explore tramp

    - my tramp notes

*** General

    - figure out how to get bookmarks? to open file: references in org files defined by org-store-link
    - Find a mechanism to apply configurations to a set of file identified by a predicate
      - eg a way to specify a specific code formatting policy to work vs personal files
      - ask in reddit?

*** From Howard

    - use [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::(use-package%20whitespace%20:bind%20("C-c%20T%20w"%20.%20whitespace-mode)][Howards whitespace mode]]
    - experiment with [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::(use-package%20fill%20:bind%20(("C-c%20T%20f"%20.%20auto-fill-mode)][Howards fill-mode]]
    - I think I want [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::Unfilling%20a%20paragraph%20joins%20all%20the%20lines%20in%20a%20paragraph%20into%20a%20single%20line.%20Taken%20from%20%5B%5Bhttp://www.emacswiki.org/UnfillParagraph%5D%5Bhere%5D%5D.][unfill paragraph]]
    - [[file:/t/emacs-configs/howardabrams-dot-files/emacs-fixes.org::I%20rarely%20want%20to%20kill%20any%20buffer%20but%20the%20one%20I'm%20looking%20at.%20#+BEGIN_SRC%20elisp%20(global-set-key%20(kbd%20"C-x%20k")%20'kill-this-buffer)%20(global-set-key%20(kbd%20"C-x%20K")%20'kill-buffer)%20#+END_SRC][kill this buffer]]
    - adopt Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::*Dash][interface to dash]]

**** maybe explore these

     Howard has a bunch of _Technical Artifacts_ sections

     - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-fixes.org::*Technical%20Artifacts][emacs-fixes]]
     - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Technical%20Artifacts][emacs.org]]
     - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::*Technical%20Artifacts][emacs-mac.org]]

     Consider reading these for the insights they may contain

     Howard has a bunch of [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Font%20Settings][font choices]]. But I don't know how he possibly installs these fonts. So stick with
     Monaco for the short term. Well, now I know a bit more about installing fonts. At least, installing
     Hack.

     Here is where [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::(if%20(eq%20system-type%20'darwin)%20(require%20'init-mac)%20(require%20'init-linux))][Howard chooses between his mac and linux configurations]]

*** From Daniel Mai

   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*C/Java][more sane C/java brace handling via Daniel]]
   - figure out how to get bookmarks? to open file: references in org files defined by org-store-link
   - Daniel has some interesting [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Open%20other%20apps%20from%20Emacs][open in other apps functions]] I would like to investigate as well
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*List%20buffers][ibuffer?]]
   - investigate package recentf
   - Daniel has a nice example [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Installation][passing an emacs-lisp variable into a shell]] buffer to execute
     - and a [[file:/t/emacs-configs/danielmai-dotemacs/config.org::#+begin_src%20emacs-lisp%20(use-package%20exec-path-from-shell%20:ensure%20t%20:init%20(exec-path-from-shell-initialize))%20#+end_src][link to an info buffer in emacs]]
   - consider creating an auth-source thing as [[file:/t/emacs-configs/danielmai-dotemacs/config.org::(use-package%20auth-source%20:config%20(customize-set-variable%20'auth-sources%20'((:source%20"~/.authinfo.gpg"))))][Daniel]] and IIRC jwiegley do
   - Daniel uses
     - helm
     - and ivy, swiper, counsel
     - and avy
   - Daniels config for [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Multiple%20cursors][multiple cursors]]
   - Figure out why [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Yasnippet][Daniel likes yasnippets]]
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*terminal-here][terminal here?]]
   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*go-mode][Daniel's go-mode]]
   - here is how Daniel distinguishes between packages he gets from elpa vs [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Non-ELPA%20packages][local site-lisp]]
   - how Daniel starts [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Emacsclient][emacs server for emacsclient]]

** Install Essential Packages
*** Tier 2: Maybe, Consider These

    Packages that I most likely want to keep, but which need some investigation to validate:

    - undo-tree

    - flycheck

    - elpy
      - python programming mode from Howard
      - check it out

    - yaml-mode

    - visual-regexp

    - I would like to consider [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]]

    - ox-twbs
      - twitter bootstrap rendering of generated org mode files

    - avy

    - jedi from Howards config

    - imenu-anywhere

    - Howards font size increase/decrease functions

    - superword mode?  jwm::comment-region, jwm::c-ifdef-region?

    #+BEGIN_SRC emacs-lisp :tangle no
      (defun jwm::prog-mode-hook ()
        (superword-mode t))
      (add-hook 'prog-mode-hook #'jwm::prog-mode-hook)
    #+END_SRC

    - maybe: yasnippet

** Open Questions

   Tabs; it looks like my tab-wdith setting is not taking effect
   #+BEGIN_SRC emacs-lisp :tangle no
     (setq tab-width 2)
   #+END_SRC

* Introduction
** About This File

   After many years of emacs evolution via hunting and pecking, I finally refactored my existing emacs init
   setup in the literate style. I have previously and continue to follow the lead of many fine emacs
   devotees, among them:

   - [[https://github.com/howardabrams/dot-files/blob/master/emacs.org][Howard Abrams]]
   - [[https://github.com/sachac/.emacs.d][Sacha Chua]]
   - [[https://github.com/danielmai/.emacs.d][Daniel Mai]]
   - [[https://www.wisdomandwonder.com/tag/emacs][Grant aka Wisdom and Wonder]]
   - [[https://github.com/jwiegley/dot-emacs][John Weigley]]
   - [[https://github.com/purcell/emacs.d][Steve Purcell]]
   - [[https://github.com/abo-abo/oremacs][abo-abo]]
   - and many others

   To all of these contributors, I doff my cap in salute. Your published work has inspired and -- to be honest
   -- at times terrified me as I have contemplated cutting and splicing together these various styles in search
   of my own.

   I would also like to publicly acknowledge certain emacs contributors of the YouTube genre, among them:

   - [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Ranier König]]
   - [[https://www.youtube.com/channel/UClT2UAbC6j7TqOWurVhkuHQ][Sacha Chua]]
   - [[https://www.youtube.com/playlist?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg][Mike Zamansky]]
     - [[https://cestlaz.github.io/stories/emacs/][blog series]]
   - [[https://www.youtube.com/user/howardabrams/videos][Howard Abrams]]
   - [[https://www.youtube.com/playlist?list=PL0sMmOaE_gs3GbuZV_sNjwMREw9rfElTV][John Kitchen]]
   - [[https://www.youtube.com/channel/UCCRdRbI93UGW0AZttVH3SbA/feed][Daniel Gopar]]
   - [[https://www.youtube.com/watch?v=gfZDwYeBlO4&t=4101s][Alain M. Lafon]]

   I have drawn inspiration to adopt new ways of doing some very old tricks from these fine folks.

   In this refactor, I have the following major goals:

   - use the literate programming style
     - learn babel and tangle in the process
   - learn more emacs-lisp; even become competent?
   - add ivy, swiper and counsel in addition to -- or perhaps replace? -- helm

   as well as a host of smaller, clean-up type goals.

** Which emacs on Mac OS X?

   Circa summer 2019, I prefer [[https://emacsformacosx.com/][GNU Emacs for Mac OS X]] installed by homebrew.

   #+BEGIN_SRC shell
     brew cask install emacs
   #+END_SRC

   This installs emacs and emacsclient, which provide my emacs foundation.

   I *always* invoke emacs from the iterm shell, so it will inherit the environment variables that get setup
   in my login shells.  In particular, the [[https://github.com/caldwell/build-emacs/blob/master/launch.rb][emacs launcher script]] from [[https://emacsformacosx.com/][GNU Emacs for Mac OS X]] sets PATH well.

** zsh Shell Support

   I have been a zsh user for some time, but I also maintain a reasonable bash setup.  In this config, I
   expect to add support for zsh idioms over time, especially as [[https://www.theverge.com/2019/6/4/18651872/apple-macos-catalina-zsh-bash-shell-replacement-features][zsh will be the default shell on MacOS
   Catalina]].

* Record Startup Timing

  Record the elapsed time of starting up emacs.

  My /classic/ configuration took about 2.1 seconds to load.

  #+BEGIN_SRC emacs-lisp
    (defconst emacs-start-time (current-time))

    (unless noninteractive
      (message "Loading %s..." load-file-name))
  #+END_SRC

* General Settings
** Emacs Directories

   I prefer Howard's style of [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#my-directory-location][defining where to store eveything]], so I shamelessly stole it.

   #+BEGIN_SRC emacs-lisp
     (defconst jwm/emacs-directory (concat (getenv "HOME") "/.emacs.d"))

     (defun jwm/emacs-subdirectory (d) (expand-file-name d jwm/emacs-directory))

     ;; initialize some directories if needed
     (let* ((subdirs '("elisp" "backups"))
            (fulldirs (mapcar (lambda (d) (jwm/emacs-subdirectory d)) subdirs)))
       (dolist (dir fulldirs)
         (when (not (file-exists-p dir))
           (message "Make directory: %s" dir)
           (make-directory dir))))
   #+END_SRC

** Custom Settings

   Explicitly store and load my custom settings.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "settings.el" jwm/emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file t))
   #+END_SRC

** Helpful Predicates

   Some useful predicates in customization...

   #+BEGIN_SRC emacs-lisp
     (defun jwm/mac-p ()
       (and (eq 'ns (window-system))
            (eq 'darwin system-type)))

     (defun jwm/personal-mac-p ()
       (and (jwm/mac-p)
            (file-exists-p (concat (getenv "HOME") "/jdocs"))))

     (defun jwm/sift-mac-p ()
       (and (jwm/mac-p)
            (file-exists-p (expand-file-name "~/code/java/build.gradle"))))
   #+END_SRC

** Modernizing Emacs

   Another section I lifted [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#modernizing-emacs][straight from Howard]].  This is his text.

   With a long history of working on small machines without gigabytes
   of RAM, we might as well let Emacs be the beast it has always
   dreamed.

   First, let’s increase the cache before starting garbage collection:
   #+BEGIN_SRC elisp
     (setq gc-cons-threshold 50000000)
   #+END_SRC

   Found [[https://github.com/wasamasa/dotemacs/blob/master/init.org#init][here]] how to remove the warnings from the GnuTLS library when
   using HTTPS... increase the minimum prime bits size:
   #+BEGIN_SRC elisp
     (setq gnutls-min-prime-bits 4096)
   #+END_SRC

** Personal Information

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Jeff McCarrell"
           user-mail-address (cond
                              ((jwm/sift-mac-p) "jmccarrell@siftscience.com")
                              (t "jeff@mccarrell.org")))
   #+END_SRC
** Emacs Server and PATH.

   Start emacs server on my main windowed emacs.

   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (server-start))
   #+END_SRC

   Maybe someday add support to edit text in emacs from Chrome.  As adapted from jwiegley.  However, we I
   try this my emacs doesn't seem to read the entire =init.el=.  So defer this for now.

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package edit-server
       :if (window-system)
       :defer 5
       :config
       (edit-server-start))
   #+END_SRC

   I considered using =exec-path-from-shell= as [[https://github.com/danielmai/.emacs.d/blob/master/config.org#mac-customizations][Daniel Mai does]], but some experimentation shows that the
   only added benefit I get is to set MANPATH.  At the moment, I don't consider that enough of a win.

   =exec-path= is reasonably set by my usual method of invoking emacs from iTerm, which also benefits from
   the [[https://github.com/caldwell/build-emacs/blob/master/launch.rb][emacs ruby launcher script]] from [[https://emacsformacosx.com/][GNU Emacs for Mac OS X]].

   #+BEGIN_SRC emacs-lisp :tangle no
     exec-path
     ;; =>
     ("/usr/local/bin" "/usr/bin" "/bin" "/usr/sbin" "/sbin" "/Users/jeff/.pyenv/shims" "/Users/jeff/bin"
      "/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14"
      "/Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14"
      "/Applications/Emacs.app/Contents/MacOS/libexec"
      "/Applications/Emacs.app/Contents/MacOS/bin")
   #+END_SRC

   Here is what I see from =exec-path-from-shell=

   #+BEGIN_SRC emacs-lisp :tangle no
     (exec-path-from-shell-initialize)
     ;; =>
     (("MANPATH" . "/usr/share/man:/usr/local/share/man:/Library/TeX/Distributions/.DefaultTeX/Contents/Man:/usr/local/opt/coreutils/libexec/gnuman")
      ("PATH" . "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/jeff/.pyenv/shims:/Users/jeff/bin"))
   #+END_SRC

   which is not sufficiently better IMO.

* Package Initialization
** Package Manager

   Ensure the org repository and melpa are searched for packages.

   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (unless (assoc-default "org" package-archives)
       (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

     (package-initialize)
   #+END_SRC

   Use =M-x package-refresh-contents= to reload the list of packages as needed.

** Use-Package

   Prefer [[https://github.com/jwiegley/use-package][use-package]] more or less as a more convenient way of customizing emacs. It does a whole lot more
   than that. My usage is fairly shallow.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (setq use-package-verbose t)
     (setq use-package-always-ensure t)

     (require 'use-package)
   #+END_SRC

** Howard's Recommended Emacs Lisp Libs

   Again [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#init-file-support][following Howard here]]. Add in these supporting libraries to ease emacs lisp development. [[https://github.com/magnars/dash.el][dash]] for a
   modern list api, [[https://github.com/magnars/s.el][s]] for string manipulation, and [[https://github.com/rejeep/f.el][f]] for file manipulation. Also load in =cl= as other
   packages may depend on it.

   #+BEGIN_SRC emacs-lisp
     (require 'cl)

     (use-package dash
       :config (eval-after-load "dash" '(dash-enable-font-lock)))

     (use-package s)

     (use-package f)
   #+END_SRC

* Variables
** Prefer Minimal Emacs

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     ;; needed for emacs23
     (setq inhibit-splash-screen t)
     (setq initial-scratch-message "")

     ;; Don't beep at me
     (setq visible-bell t)

     ;; get rid of all of the backup files
     (setq backup-before-writing nil)
     (setq make-backup-files nil)

     ;; screen real estate is for text, not widgets
     (when (window-system)
       (tool-bar-mode 0)
       (when (fboundp 'horizontal-scroll-bar-mode)
         (horizontal-scroll-bar-mode -1))
       (scroll-bar-mode -1))
   #+END_SRC

** Prefer utf8 Everywhere

   Follow Grant's [[https://www.wisdomandwonder.com/article/10775/emacsorg-mode-how-to-probably-configure-everything-for-utf-8-in-emacs][lead here]]

   #+BEGIN_SRC emacs-lisp
     ;; prefer utf-8 encoding in all cases.
     (let ((lang 'utf-8))
       (set-language-environment lang)
       (prefer-coding-system lang))
   #+END_SRC

** Tabs

   I prefer spaces over tabs in all cases.  [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][Source]]

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 2)
   #+END_SRC

   Tab for competion is wired deeply into my emacs-fingers.

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-always-indent 'complete)
   #+END_SRC

** Line Wrapping

   In general, I prefer to see the entire line of text in the window even when it is wider than the frame.
   Thus I prefer [[info:emacs#Visual%20Line%20Mode][Visual Line Mode]].  And, in general, I want emacs to wrap my text for me.  I chose 108 as a
   relatively arbitrary line width value that works well for me.  Hollerith cards are dead!  Long live
   Hollerith cards.

   #+BEGIN_SRC emacs-lisp
     ;; Hollerith cards have had their day. Norming to 80 characters seems like a poor use of screen real estate
     ;; to me. I can't form a particular argument for 108, other than: it larger than 72 and seems to fit better.
     (setq-default fill-column 108)
     (auto-fill-mode)
     (global-visual-line-mode)
     (diminish 'visual-line-mode)
   #+END_SRC

** Terminal and Shell (zsh) Settings

*** Reduce Startup Time for zsh

    I find the battle to keep shell startup time crisp to be never ending.  I have come to regard it in the
    same vein as spring cleaning or maybe dental visits for teeth cleaning: useful, but never my first
    choice.

    As of this writing, my interactive zsh startup times are on the order of 1 second:

    #+BEGIN_EXAMPLE
    ❯ time zsh -i -c exit
    zsh -i -c exit  0.68s user 0.36s system 97% cpu 1.066 total
    #+END_EXAMPLE

    which is too long.  [[https://github.com/abo-abo/swiper/issues/2190#issuecomment-525385066][Especially for counsel-grep]].  So configure the arguments given to zsh by emacs when
    attempting to run processes via =shell-command= and friends to ignore reading initialization files.

    That this works is dependent on already having a reasonable environment configured -- including and most
    especially PATH -- so that we don't *need* to re-execute all of that lovely zsh initialization code
    every time emacs wants to run a process.

**** What is =-conorcs=?

     As described in [[http://zsh.sourceforge.net/Doc/Release/Invocation.html#Invocation-2][zsh invocation]], zsh allows concatenation of single character command line options.  We
     want both
     - =-c=
     - =-o norcs=
     and as a single argument to reduce potential issues with whitespace evaluation at the emacs shell
     boundary.  We can express that as =-conorcs=.

     The intuition about this setting is reinforced by measurement:

     #+BEGIN_EXAMPLE
     M-x shell-command time zsh -onorcsc exit
     zsh -onorcsc exit  0.00s user 0.00s system 69% cpu 0.004 total
     #+END_EXAMPLE

     Which leads to:

     #+BEGIN_SRC emacs-lisp
       (defun jwm/shell-is-zsh-p ()
         (string-suffix-p "zsh" shell-file-name))

       (when (jwm/shell-is-zsh-p)
         (setq shell-command-switch "-conorcs"))
     #+END_SRC

**** Effect

    After this setting is in place, response time for emacs executed processes improve, for me by 3 orders
    of magnitude.

    #+BEGIN_EXAMPLE
    M-x shell-command time date
    Fri Aug 30 08:49:12 PDT 2019
    date  0.00s user 0.00s system 58% cpu 0.004 total
    #+END_EXAMPLE

    Your mileage will vary depending on the contents of your zsh dot files.

**** What about =bash=?

     An alternative would be to switch to bash, which from my measurements and current config shows shorter
     startup time.  This difference is no doubt entirely due to my zsh initialization scripts.

     #+BEGIN_EXAMPLE
     M-x shell-command time bash -c exit
     bash -c exit  0.00s user 0.00s system 69% cpu 0.004 total
     #+END_EXAMPLE

** Other Misc Settings

   Various settings I have come to prefer over the years.

   #+BEGIN_SRC emacs-lisp
     ;; always end a file with a newline
     (setq require-final-newline t)

     ;; delete the region when typing, just like as we expect nowadays.
     (delete-selection-mode t)

     ;; highlight the matching parenthesis
     (show-paren-mode t)

     ;; Answering just 'y' or 'n' will do
     (defalias 'yes-or-no-p 'y-or-n-p)

     ;; revert buffers automatically when underlying files are changed externally
     (global-auto-revert-mode t)

     ;; no disabled functions
     (setq disabled-command-function nil)

   #+END_SRC

* Display Settings
** Color Theme

   After much experimentation, I have come to prefer zenburn. Over the years, I have used my own color theme,
   which I used to be quite proud of, and then solarized. Now I have come to prefer zenburn. It works well in
   the terminal as well.

   Here is how Sacha overrides and [[file:/t/emacs-configs/sacha-chua-dotemacs/Sacha.org::(defun%20my/setup-color-theme%20()%20(interactive)%20(when%20(display-graphic-p)%20(color-theme-solarized))%20(set-background-color%20"black")%20(set-face-foreground%20'secondary-selection%20"darkblue")%20(set-face-background%20'secondary-selection%20"lightblue")%20(set-face-background%20'font-lock-doc-face%20"black")%20(set-face-foreground%20'font-lock-doc-face%20"wheat")%20(set-face-background%20'font-lock-string-face%20"black"))%20(use-package%20color-theme-solarized%20:config%20(my/setup-color-theme))][customizes her use of solarized]].

   #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :init (load-theme 'zenburn t))
   #+END_SRC

** Font

   I prefer a little bigger (14 point) font on my personal laptop, especially on my large monitor at home.

   Here is how [[https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_font.el#L7-L33][Xah Lee sets his frame font]]

   And a 2019 [[https://www.wisdomandwonder.com/text/12298/choosing-a-monospace-font-2019-march#more-12298][blog post]] comparing fonts that led me to the font [[https://github.com/source-foundry/Hack][Hack]].  Install Hack via homebrew:

   #+BEGIN_SRC shell
     brew cask install caskroom/fonts/font-hack
   #+END_SRC

   and use it for all frames:

   #+BEGIN_SRC emacs-lisp
     (defun jwm/font-exists-p (f)
       (and (window-system)
            (member f (font-family-list))))

     (when (window-system)
       (let ((preferred-font
              (cond
               ((and (jwm/font-exists-p "Hack") (jwm/mac-p)) "Hack-14")
               (t "Monaco-12"))))
           (message "setting Jeff preferred font %s" preferred-font)
           (set-frame-font preferred-font t t)))
   #+END_SRC

** Whitespace Mode

   This is another [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#whitespace-mode][copy and paste from Howard]]. It makes it easier to see whitespace when necessary.

   #+BEGIN_SRC emacs-lisp
     (use-package whitespace
       :bind ("C-c T w" . whitespace-mode)
       :init
       (setq whitespace-line-column nil
             whitespace-display-mappings '((space-mark 32 [183] [46])
                                           (newline-mark 10 [9166 10])
                                           (tab-mark 9 [9654 9] [92 9])))
       :config
       (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
       (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
       (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
       :diminish whitespace-mode)
   #+END_SRC

* Selection
** expand-region

   I have grown to prefer =expand-region=.  This is directly modified/cribbed from Howard's config.

   My usage has not yet grown to benefit from Howard's additions; maybe some day.

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config
       (defun ha/expand-region (lines)
         "Prefix-oriented wrapper around Magnar's `er/expand-region'.

          Call with LINES equal to 1 (given no prefix), it expands the
          region as normal.  When LINES given a positive number, selects
          the current line and number of lines specified.  When LINES is a
          negative number, selects the current line and the previous lines
          specified.  Select the current line if the LINES prefix is zero."
         (interactive "p")
         (cond ((= lines 1)   (er/expand-region 1))
               ((< lines 0)   (ha/expand-previous-line-as-region lines))
               (t             (ha/expand-next-line-as-region (1+ lines)))))

       (defun ha/expand-next-line-as-region (lines)
         (message "lines = %d" lines)
         (beginning-of-line)
         (set-mark (point))
         (end-of-line lines))

       (defun ha/expand-previous-line-as-region (lines)
         (end-of-line)
         (set-mark (point))
         (beginning-of-line (1+ lines)))

       ;; jwm: however, I can't seem to get C-= from my mac keyboard.
       ;;   so prefer C-@
       :bind ("C-@" . ha/expand-region))
   #+END_SRC

* Window Movement

  I prefer ace-window

  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :bind (("M-o" . ace-window))
      :config
      (setq aw-dispatch-always t)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  #+END_SRC

  Lets try out eyebrowse.

  However, its default binding =C-c C-w= conflicts with org-refile, so it has to go.

  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package eyebrowse)
    (eyebrowse-mode)
  #+END_SRC

* Key Bindings
** Option and Command Modifier Keys on a Mac

   Howard maps option and command to different emacs key symbols to allow him that many more possible key
   bindings. Like this:

   #+BEGIN_SRC emacs-lisp :tangle no
     (setq mac-option-modifier 'meta)
     (setq mac-command-modifier 'super)
   #+END_SRC

   And I did much the same thing.  However, I think I prefer to keep meta closest to the space bar.

   I leave right-option for the OS X combiner keys, like √ from right-option v.

   And I prefer to switch between emacs frames using the standard mac gesture Command-`

   #+BEGIN_SRC emacs-lisp
     (when (jwm/mac-p)
       (setq mac-command-modifier 'meta)
       (setq mac-option-modifier 'super)
       (setq mac-right-option-modifier 'none)

       ;; mirror the mac user gesture for switching frames
       (bind-key "M-`" 'other-frame)

       ;; prevent my thumb from triggering this menu on the trackpad when in open laptop mode
       ;;  ie, when I am working on the train
       (bind-key [C-down-mouse-1] 'ignore))
   #+END_SRC

** Global Key Bindings

   I really like Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Key%20Bindings][global key binding approach]], which leverages John Wiegley's [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]] that is part
   of [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][use-package]].

   Recall that there are several /power/ features of =bind-key=, such as rebinding, adding keys to a
   specific map etc. Here are John's [[https://github.com/jwiegley/use-package/blob/master/bind-key.el#L41-L90][pointers]] in the comments of the package.

   #+BEGIN_SRC emacs-lisp
     (bind-keys
      ;; long time bindings I have preferred
      ("C-c u" . revert-buffer)
      ("C-M-g" . goto-line)

      ;; perhaps turn these on when/if I bring in Howards font size functions
      ;; ("s-C-+" . ha/text-scale-frame-increase)
      ;; ("A-C-+" . ha/text-scale-frame-increase)
      ;; ("s-C-=" . ha/text-scale-frame-increase)
      ;; ("A-C-=" . ha/text-scale-frame-increase)
      ;; ("s-C--" . ha/text-scale-frame-decrease)
      ;; ("A-C--" . ha/text-scale-frame-decrease)
      )
   #+END_SRC

** which-key

   I have come to appreciate the exploration of the key maps that [[https://github.com/justbur/emacs-which-key][which-key]] enables.

   Howard extensively [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#displaying-command-sequences][customizes the display of which-key]]. I find that interesting, and maybe something to
   pursue one day.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       :diminish which-key-mode
       :config

       ;; prefer to show the entire command name with no truncation.
       ;;  some of those projectile command names exceed the default value of 27, eg
       ;;  projectile-toggle-between-implementation-and-test
       (setq which-key-max-description-length nil)
       (which-key-mode 1))
   #+END_SRC

* Dired

  Start simple.  The main keystrokes I want to train my fingers to execute are:

  | keys      | command                 | what it does                                          |
  |-----------+-------------------------+-------------------------------------------------------|
  | C-x C-j   | dired-jump              | Jump to Dired buffer corresponding to current buffer. |
  | C-x 4 C-j | dired-jump-other-window |                                                       |

  This config is copied from bbatsov

  But apparently =dired= is a non-package package -- whatever that means.  So to correct this startup error:

  #+BEGIN_QUOTE
  Error (use-package): Failed to install dired: Package ‘dired-’ is unavailable
  #+END_QUOTE

  I have added =:ensure nil=, following [[https://emacs.stackexchange.com/questions/26810/why-doesnt-use-package-dired-work-for-me][this advice]]

  #+BEGIN_SRC emacs-lisp
    (use-package dired
      :ensure nil
      :config
      ;; dired - reuse current buffer by pressing 'a'
      ;; (put 'dired-find-alternate-file 'disabled nil)

      ;; always delete and copy recursively
      ;; (setq dired-recursive-deletes 'always)
      ;; (setq dired-recursive-copies 'always)

      ;; if there is a dired buffer displayed in the next window, use its
      ;; current subdir, instead of the current subdir of this dired buffer
      (setq dired-dwim-target t)

      ;; enable some really cool extensions like C-x C-j (dired-jump)
      (require 'dired-x))
  #+END_SRC

* Search
** ag

   #+BEGIN_SRC emacs-lisp
     ;; ag config derived from danielmai's config
     (use-package ag
       :commands ag)
   #+END_SRC

* Former Swiper Helm Projectile

  I choose to pattern my config for these related packages after abo-abo, the author.  Well, it turns out
  abo-abo has a pretty baroque way of loading his configuration.

  So model after the [[https://github.com/bbatsov/emacs.d/blob/master/init.el#L538-L572][approach used by bbatsov]].

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :init
      (setq projectile-completion-system 'ivy)
      :config
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1))

    (use-package swiper
      :config
      (global-set-key "\C-s" 'swiper))
  #+END_SRC

** Counsel Projectile

   #+BEGIN_SRC emacs-lisp
     (use-package counsel-projectile
       :config
       (counsel-projectile-mode))
   #+END_SRC

* Helm, Ivy, Swiper and Projectile

** Former Helm Config

   I want to try the abo-abo's counsel stuff.  So leave helm behind for now.

*** Former, now-commented out helm config

  Look at how Howard, Sacha and Daniel Mai configure helm
  - [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Helm][Howard's config]]
    - Howard is not a regular user of helm.  He does have some good hints in there though.
  - [[file:/t/emacs-configs/sacha-chua-dotemacs/Sacha.org::*Helm%20-%20interactive%20completion][Sacha's config]]
    - Sacha has a reasonable helm config that I could base mine off of.
  - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Helm][Daniel's config]]
    - Daniel configures [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Locate][helm-locate to use mdfind]], aka Spotlight
    - Daniel has a nice reasonable config that I could benefit from
  - [[file:jeff-classic-init.el::;;%20helm%20config%20derived%20from%20danielmai's%20config][My classic config]]
    - Looks like I based my former config on Daniels config.
    - So pick some blend of Daniel and Sacha's work to move forward here.

  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package helm
      :diminish helm-mode
      :bind (("C-c h" . helm-command-prefix)
             ("C-x b" . helm-mini)
             ("C-`" . helm-resume)
             ("M-x" . helm-M-x)
             ("C-x C-f" . helm-find-files)
             ("C-x C-r" . helm-recentf))
      :init
      (require 'helm-config)
      :config
      (setq helm-locate-command "mdfind -interpret -name %s %s"
            helm-ff-newfile-prompt-p nil
            helm-M-x-fuzzy-match t)
      (helm-mode))
    (use-package helm-projectile
      :after helm-mode
      :commands helm-projectile)
    (use-package helm-ag
      :ensure t
      :after helm-mode)
    (use-package helm-swoop
      :ensure t
      :after helm-mode
      :bind ("s-w" . helm-swoop))
  #+END_SRC

** Projectile Config

   - [[file:/t/emacs-configs/danielmai-dotemacs/config.org::*Projectile][Daneil's projectile config]]
     - looks sane
     - investigate =projectile-switch-project-action=

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :diminish projectile-mode
       :commands (projectile-mode projectile-switch-project)
       :bind (("C-c p p" . projectile-switch-project)
              ("C-c p s s" . projectile-ag)
              ("C-c p s r" . projectile-ripgrep))
       :config
       (setq projectile-keymap-prefix (kbd "C-c p"))
       (projectile-global-mode t)
       (setq projectile-enable-caching t)
       (setq projectile-switch-project-action 'projectile-dired))
   #+END_SRC

*** Former helm projectile config

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package projectile
       :diminish projectile-mode
       :bind-keymap ("C-c p" . projectile-command-map)
       :init
       (setq projectile-completion-system 'ivy)
       :config
       (bind-key "s p" 'helm-do-ag-project-root 'projectile-command-map)
       (bind-key "s a" 'helm-do-ag 'projectile-command-map)
       (projectile-mode +1))
   #+END_SRC

** Ivy and Swiper Config

   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :diminish (ivy-mode . "")
       :config
       (ivy-mode 1)
       ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
       (setq ivy-use-virtual-buffers t)
       ;; show both the index and count of matching items
       (setq ivy-count-format "%d/%d "))

     (use-package swiper
       :config
       (global-set-key "\C-s" 'swiper))
   #+END_SRC

* Git

  I would like to consider [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]] someday.

** Magit

   Indispensible.  One of the two killer apps for emacs IMO.

   Howard does [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Magit][additional customization]] that I should consider someday.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :defer t
       :bind ("C-x g" . magit-status))
   #+END_SRC

* Org
** Org Configuration
*** Org Global Key Bindings

    #+BEGIN_SRC emacs-lisp
      (bind-keys
       ;; org mode wants these default global bindings set up.
       ("C-c l" . org-store-link)
       ("C-c c" . org-capture)
       ("C-c a" . org-agenda)
       ("C-c b" . org-iswitchb))
    #+END_SRC

*** Where to Look for Org Info

    #+BEGIN_SRC emacs-lisp
      ;; I prefer dropbox; too bad my work does not.
      (setq org-directory
            (cond ((jwm/sift-mac-p) "/s/notes/org")
                  (t "~/Dropbox/org")))

      ;; The default place to put notes for capture mode
      (setq org-default-notes-file
            (concat org-directory
                    (cond ((jwm/sift-mac-p) "/sift.org")
                          (t "/todo.org"))))

      ;; my agenda files
      ;;  code shamelessly stolen from Sacha Chua's config
      (setq org-agenda-files
            (delq nil
                  (mapcar (lambda (x) (and (file-exists-p x) x))
                          `("~/Dropbox/org/notes.org",
                            org-default-notes-file))))
    #+END_SRC

*** Templates, Tasks, Refiling

    #+BEGIN_SRC emacs-lisp
      ;; capture template.
      (setq org-capture-templates
            '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
               "* TODO %?\n %t\n  %i\n  %a")
              ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
               "* %?\nEntered on %U\n  %i\n  %a")))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; Jeff task states
      (setq org-todo-keywords
            '((sequence
               "TODO(t)"
               "NEXT(n!)"
               "DOING(g!)"
               "WAITING(w@/!)"
               "|" "DONE(d!)"
               "CANCELLED(c@)"
               "DEFERRED(D@)")))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; I prefer 2 levels of headlines for org refile targets
      ;;  this matches well with my TASKS/PROJECTS high level
      ;; further, I prefer the refiling to be per-buffer, not across all org-agenda-files
      ;;  to preserve context.  most often, I use the file as context.
      (setq org-refile-targets '((nil . (:maxlevel . 2))))
    #+END_SRC

** Save Org Files Periodically

   Stolen from John Weigley.

   #+BEGIN_SRC emacs-lisp
     (defun save-org-mode-files ()
       (dolist (buf (buffer-list))
         (with-current-buffer buf
           (when (eq major-mode 'org-mode)
             (if (and (buffer-modified-p) (buffer-file-name))
                 (save-buffer))))))

     (run-with-idle-timer 25 t 'save-org-mode-files)
   #+END_SRC

** Org babel

   I stole much of this from Daniel Mai

   #+BEGIN_SRC emacs-lisp
     (use-package ob-restclient)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (C . t)
        (calc . t)
        (java . t)
        (ruby . t)
        (lisp . t)
        (scheme . t)
        (shell . t)
        (sqlite . t)
        (js . t)
        (restclient . t)))

     (defun my-org-confirm-babel-evaluate (lang body)
       "Do not confirm evaluation for these languages."
       (not (or (string= lang "C")
                (string= lang "java")
                (string= lang "python")
                (string= lang "emacs-lisp")
                (string= lang "sqlite"))))
     (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
   #+END_SRC

* Programming Support
** C Style

   According to cc-styles.el, the function =c-add-style= is the preferred way to define C style.

   #+BEGIN_QUOTE
   Use the function `c-add-style' to add new styles or modify existing styles (it is not a good idea to
   modify existing styles -- you should create a new style that inherits the existing style).
   #+END_QUOTE

   Here is the [[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Adding-Styles.html][GNU manual on adding styles]]

** crux

   I use bbatsov's [[https://github.com/bbatsov/crux][crux]] at times, especially =C-c n=.

   #+BEGIN_SRC emacs-lisp
     (use-package crux
       :bind
       (
        ("C-c n" . crux-cleanup-buffer-or-region)
        ;; ("C-S-RET" . crux-smart-open-line-above)
        ;; ("M-o" . crux-smart-open-line)
        ("C-c d" . crux-duplicate-current-line-or-region)
        ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
        ("C-c C-r" . crux-rename-file-and-buffer)))
   #+END_SRC

** js2 and json mode

   I lifted this straight from Howard's config.  Not that I write much javascript

   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :init
       (setq js-basic-indent 2)
       (setq-default js2-basic-indent 2
                     js2-basic-offset 2
                     js2-auto-indent-p t
                     js2-cleanup-whitespace t
                     js2-enter-indents-newline t
                     js2-indent-on-enter-key t
                     js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))
       (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
       (add-to-list 'auto-mode-alist '("\\.es6$" . js2-mode)))

   #+END_SRC

   I spend more time dealing with various blobs of json, so follow the lead of [[http://develop.spacemacs.org/layers/+lang/json/README.html][spacemacs]] for [[https://github.com/joshwnj/json-mode][json-mode]]

   #+BEGIN_SRC emacs-lisp
     (use-package json-mode)
   #+END_SRC

* Report Startup Timing

  I'm pretty sure I got this from John Weigley.

  #+BEGIN_SRC emacs-lisp
    ;;; Post initialization

    (let ((elapsed (float-time (time-subtract (current-time)
                                              emacs-start-time))))
      (message "Loading %s...done (%.3fs)" load-file-name elapsed))

    (add-hook 'after-init-hook
              `(lambda ()
                 (let ((elapsed (float-time (time-subtract (current-time)
                                                           emacs-start-time))))
                   (message "Loading %s...done (%.3fs) [after-init]"
                            ,load-file-name elapsed)))
              t)
  #+END_SRC
