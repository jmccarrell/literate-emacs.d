#+TITLE: Emacs Configuration
#+AUTHOR: Jeff McCarrell
#+EMAIL: jeff@mccarrell.org
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp  :tangle "init.el"

* Introduction
** Next steps: key binding iteration
*** Create Key Bindings

   - experiment with Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::(setq%20mac-option-modifier%20'meta)%20(setq%20mac-command-modifier%20'super)][mac modifier key bindings]] so I can get Super and Alternate? key prefixes
     - and I think I really like Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Key%20Bindings][global key binding approach]]

   - then set up =which-key=

**** option
*** todo eventually

   - use [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::(use-package%20whitespace%20:bind%20("C-c%20T%20w"%20.%20whitespace-mode)][Howards whitespace mode]]
   - experiment with [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::(use-package%20fill%20:bind%20(("C-c%20T%20f"%20.%20auto-fill-mode)][Howards fill-mode]]
   - I think I want [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::Unfilling%20a%20paragraph%20joins%20all%20the%20lines%20in%20a%20paragraph%20into%20a%20single%20line.%20Taken%20from%20%5B%5Bhttp://www.emacswiki.org/UnfillParagraph%5D%5Bhere%5D%5D.][unfill paragraph]]
   - [[file:/t/emacs-configs/howardabrams-dot-files/emacs-fixes.org::I%20rarely%20want%20to%20kill%20any%20buffer%20but%20the%20one%20I'm%20looking%20at.%20#+BEGIN_SRC%20elisp%20(global-set-key%20(kbd%20"C-x%20k")%20'kill-this-buffer)%20(global-set-key%20(kbd%20"C-x%20K")%20'kill-buffer)%20#+END_SRC][kill this buffer]]
   - adopt Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::*Dash][interface to dash]]

*** maybe explore these

    Howard has a bunch of _Technical Artifacts_ sections

      - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-fixes.org::*Technical%20Artifacts][emacs-fixes]]
      - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::*Technical%20Artifacts][emacs.org]]
      - in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-mac.org::*Technical%20Artifacts][emacs-mac.org]]

    Consider reading these for the insights they may contain

    Howard has a bunch of [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Font%20Settings][font choices]]. But I don't know how he possibly installs these fonts. So stick with
    Monaco for the short term. Well, now I know a bit more about installing fonts. At least, installing
    Hack.

    Here is where [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::(if%20(eq%20system-type%20'darwin)%20(require%20'init-mac)%20(require%20'init-linux))][Howard chooses between his mac and linux configurations]]

*** Possible Approaches
   Another approach would be to figure out the minimum number of features I need to move over to this config
   as my default choice.

   Yet a third would be to follow some combination of Howard and Sachas configs, as I have done to date. I
   have kind of done this, as I have read much of Howard and Sachas configs.

   Another approach would be to purse a set of goals:

   - [X] a window with font and color theme I prefer
   - how to use projectile to navigate between projects as I so often want to do
     - between notes and work projects specifically
   - to support jq literate programming to solve some of the salt challenges I have at work

   Goals
   - enable tramp mode

*** DONE Howard and Sachas organization

    - State "DONE"       from              [2019-08-02 Fri 17:34]
**** Howard
    #+BEGIN_EXAMPLE
      * Introduction
      * General Settings
      * Package Initialization
      * Variables
      * Display Settings
      * Key Bindings
      * Loading and Finding Files
      * Word Smithing
      * Miscellaneous Settings
      * Programming Languages
      * Org-Mode
      * Tools
      * Applications
      * Frivolous
      * Technical Artifacts
    #+END_EXAMPLE

   Howard also loads a mac specific file on his macintoshs. That would break my /single file/ model. So
   while I find that approach logically appealing, I am not willing to go all the way toward [[file:/t/emacs-configs/howardabrams-dot-files/build.el::;;%20Simple%20Emacs%20script%20used%20to%20build/tangle%20all%20my%20support][Howards build
   process]].  But maybe I should try it?

   Executing Howards =build.el= by evaluating the buffer gives me:

   #+BEGIN_EXAMPLE
   Opening output file: No such file or directory, /Users/jeff/.lein/profiles.clj
   #+END_EXAMPLE

   So I should probably stick with my single file approach for now following the /don't use stuff you don't
   know maxim/.

   But Howard also [[file:/t/emacs-configs/howardabrams-dot-files/emacs.org::#+BEGIN_SRC%20shell%20brew%20install%20gpg%20#+END_SRC][calls brew in his main org file]] so I'm going to stick with a single file.

**** Sacha

    #+BEGIN_EXAMPLE
      * Configuration
      ** About this file
      ** Starting up
      ** System information
      ** Personal information
      ** Emacs initialization
      ** General configuration
      ** Navigation
      ** Reading
      ** Shuffling lines

      ** Writing
      ** Org  :org:
      ** Coding
      ** Internet Relay Chat
      ** Self-tracking, statistics, and other data transformations
      ** Workarounds
      ** Display
      ** Web browsing
      ** Clipboard
      ** Search
      ** Mail
      ** Ledger (personal finance)
      ** Emacs server
      ** Menus

      ** Advanced stuff / things I tend to forget about
      ** Other nifty Emacs things I want to learn
      ** Weather forecast
      ** Encryption
      ** DONE Scan ~/bin and turn the scripts into interactive commands
      ** Syncthing
      ** Search logs
      * Other cool configs you may want to check out

    #+END_EXAMPLE

*** DONE Color theme

    - State "DONE"       from              [2019-08-02 Fri 17:33]

   Where does Howard define his fonts, and theme?  A: in [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Color%20Theme][emacs-client.org]]
   - but [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Color%20Theme][Howards theme loader of choice]]: =color-theme= is obsolete
     - so I need a more modern way to pick my color theme.
     - What does Sacha do?
   - all that being said, Howard uses Steve Purcells [[https://github.com/purcell/color-theme-sanityinc-tomorrow][sanityinc tomorrow themes]], which look sweet
     - it would be nice to be able to switch themes from day to night as needed.

   Sacha defines her color theme as [[file:/t/emacs-configs/sacha-chua-dotemacs/Sacha.org::*Set%20up%20a%20light-on-dark%20color%20scheme][small overrides to solarized]]

   from Sacha, this appears to be a [[file:/t/emacs-configs/sacha-chua-dotemacs/Sacha.org::(add-hook%20'after-make-frame-functions%20(lambda%20(frame)%20(select-frame%20frame)%20(my/setup-color-theme)))][fix for the theme getting applied to new frames]]

   How do I define my theme now?  A: I just [[file:jeff-classic-init.el::(use-package%20zenburn-theme%20:init%20(load-theme%20'zenburn%20t))][load zenburn]]

** About This File

   After many years of emacs evolution via hunting and pecking, I finally refactored my existing emacs init
   setup in the literate style. I have previously and continue to follow the lead of many fine emacs
   devotees, among them:

   - [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#my-directory-location][Howard Abrams]]
   - [[https://github.com/sachac/.emacs.d][Sacha Chua]]
   - [[https://www.wisdomandwonder.com/tag/emacs][Grant aka Wisdom and Wonder]]
   - [[https://github.com/jwiegley/dot-emacs][John Weigley]]
   - [[https://github.com/purcell/emacs.d][Steve Purcell]]
   - [[https://github.com/abo-abo/oremacs][abo-abo]]
   - and many others

   To all of these contributors, I doff my cap in salute. Your published work has inspired and -- to be honest
   -- at times terrified me as I have contemplated cutting and splicing together these various styles in search
   of my own.

   I would also like to publicly acknowledge certain emacs contributors of the YouTube genre, among them:

   - [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Ranier KÃ¶nig]]
   - [[https://www.youtube.com/channel/UClT2UAbC6j7TqOWurVhkuHQ][Sacha Chua]]
   - [[https://www.youtube.com/playlist?list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg][Mike Zamansky]]
   - [[https://www.youtube.com/user/howardabrams/videos][Howard Abrams]]
   - [[https://www.youtube.com/playlist?list=PL0sMmOaE_gs3GbuZV_sNjwMREw9rfElTV][John Kitchen]]
   - [[https://www.youtube.com/channel/UCCRdRbI93UGW0AZttVH3SbA/feed][Daniel Gopar]]

   I have drawn inspiration to adopt new ways of doing some very old tricks from these fine folks.

   In this refactor, I have the following major goals:

     - use the literate programming style
       - learn babel and tangle in the process
     - learn more emacs-lisp; even become competent?
     - prefer ivy, counsel and swiper over helm
     - use =customize-theme= to create a full fledged theme for my color definitions
       - this one seems less and less important the more I work with Hack and zenburn.

   as well as a host of smaller, clean-up type goals.

* General Settings
** Directories

   I prefer Howard's style of [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#my-directory-location][defining where to store eveything]], so I shamelessly stole it.

   #+BEGIN_SRC emacs-lisp
     (defconst jwm/emacs-directory (concat (getenv "HOME") "/.emacs.d"))

     (defun jwm/emacs-subdirectory (d) (expand-file-name d jwm/emacs-directory))

     ;; initialize some directories if needed
     (let* ((subdirs '("elisp" "backups"))
            (fulldirs (mapcar (lambda (d) (jwm/emacs-subdirectory d)) subdirs)))
       (dolist (dir fulldirs)
         (when (not (file-exists-p dir))
           (message "Make directory: %s" dir)
           (make-directory dir))))
   #+END_SRC

** Custom Settings

   Explicitly store and load my custom settings.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "settings.el" jwm/emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file t))
   #+END_SRC

** DEPRECATED Starting Up

   I used to use this kind of logic to startup, cribbed from John Weigley. But in hindsight, I think it is a
   bit advanced for me. I try to minimize using stuff I don't really understand.

     #+BEGIN_SRC emacs-lisp
       ;; ;; initialize packages
       ;; (package-initialize)
       ;; (eval-and-compile
       ;;   (require 'cl)

       ;;   (defvar use-package-verbose t)
       ;;   (defvar use-package-always-ensure t)
       ;;   (require 'use-package))
     #+END_SRC
** Helpful Predicates

   Some useful predicates in customization...

    #+BEGIN_SRC emacs-lisp
      (defun jwm/mac-p ()
        (and (eq 'ns (window-system))
             (eq 'darwin system-type)))

      (defun jwm/personal-mac-p ()
        (and (jwm/mac-p)
             (file-exists-p "/j/pdata/.gitignore")))

      (defun jwm/sift-mac-p ()
        (and (jwm/mac-p)
             (file-exists-p (expand-file-name "~/code/java/build.gradle"))))
    #+END_SRC

** Modernizing Emacs

   Another section I lifted [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#modernizing-emacs][straight from Howard]].  This is his text.

   With a long history of working on small machines without gigabytes
   of RAM, we might as well let Emacs be the beast it has always
   dreamed.

   First, letâs increase the cache before starting garbage collection:
   #+BEGIN_SRC elisp
     (setq gc-cons-threshold 50000000)
   #+END_SRC

   Found [[https://github.com/wasamasa/dotemacs/blob/master/init.org#init][here]] how to remove the warnings from the GnuTLS library when
   using HTTPS... increase the minimum prime bits size:
   #+BEGIN_SRC elisp
     (setq gnutls-min-prime-bits 4096)
   #+END_SRC

** Personal Information

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Jeff McCarrell"
           user-mail-address (cond
                              ((jwm/sift-mac-p) "jmccarrell@siftscience.com")
                              (t "jeff@mccarrell.org")))
   #+END_SRC
* Package Initialization
** Package Manager

   Ensure the org repository and melpa are searched for packages.

   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (unless (assoc-default "org" package-archives)
       (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
     (unless (assoc-default "melpa" package-archives)
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

     (package-initialize)
   #+END_SRC

   Use =M-x package-refresh-contents= to reload the list of packages as needed.

** Use-Package

   Prefer [[https://github.com/jwiegley/use-package][use-package]] more or less as a more convenient way of customizing emacs. It does a whole lot more
   than that. My usage is fairly shallow.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (setq use-package-verbose t)
     (setq use-package-always-ensure t)

     (require 'use-package)
   #+END_SRC

** Howard's Recommended Emacs Lisp Libs

   Again [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#init-file-support][following Howard here]]. Add in these supporting libraries to ease emacs lisp development. [[https://github.com/magnars/dash.el][dash]] for a
   modern list api, [[https://github.com/magnars/s.el][s]] for string manipulation, and [[https://github.com/rejeep/f.el][f]] for file manipulation. Also load in =cl= as other
   packages may depend on it.

   #+BEGIN_SRC emacs-lisp
     (require 'cl)

     (use-package dash
       :config (eval-after-load "dash" '(dash-enable-font-lock)))

     (use-package s)

     (use-package f)
   #+END_SRC
* Variables
** Prefer Minimal Emacs

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     ;; needed for emacs23
     (setq inhibit-splash-screen t)
     (setq initial-scratch-message "")

     ;; Don't beep at me
     (setq visible-bell t)

     ;; screen real estate is for text, not widgets
     (when (window-system)
       (tool-bar-mode 0)
       (when (fboundp 'horizontal-scroll-bar-mode)
         (horizontal-scroll-bar-mode -1))
       (scroll-bar-mode -1))
   #+END_SRC

** Prefer utf8 Everywhere

   Follow Grant's [[https://www.wisdomandwonder.com/article/10775/emacsorg-mode-how-to-probably-configure-everything-for-utf-8-in-emacs][lead here]]

   #+BEGIN_SRC emacs-lisp
     ;; prefer utf-8 encoding in all cases.
     (let ((lang 'utf-8))
       (set-language-environment lang)
       (prefer-coding-system lang))
   #+END_SRC

** Tabs

   I prefer spaces over tabs in all cases.  [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][Source]]

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 2)
   #+END_SRC

   Tab for competion is wired deeply into my emacs-fingers.

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-always-indent 'complete)
   #+END_SRC
* Display Settings
** Color Theme

  After much experimentation, I have come to prefer zenburn. Over the years, I have used my own color theme,
  which I used to be quite proud of, and then solarized. Now I have come to prefer zenburn. It works well in
  the terminal as well.

  Here is how Sacha overrides and [[file:/t/emacs-configs/sacha-chua-dotemacs/Sacha.org::(defun%20my/setup-color-theme%20()%20(interactive)%20(when%20(display-graphic-p)%20(color-theme-solarized))%20(set-background-color%20"black")%20(set-face-foreground%20'secondary-selection%20"darkblue")%20(set-face-background%20'secondary-selection%20"lightblue")%20(set-face-background%20'font-lock-doc-face%20"black")%20(set-face-foreground%20'font-lock-doc-face%20"wheat")%20(set-face-background%20'font-lock-string-face%20"black"))%20(use-package%20color-theme-solarized%20:config%20(my/setup-color-theme))][customizes her use of solarized]].

  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :init (load-theme 'zenburn t))
  #+END_SRC

** Font

   I prefer a little bigger (14 point) font on my personal laptop, especially on my large monitor at home.

   Here is how [[https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_font.el#L7-L33][Xah Lee sets his frame font]]

   And a 2019 [[https://www.wisdomandwonder.com/text/12298/choosing-a-monospace-font-2019-march#more-12298][blog post]] comparing fonts that led me to the font [[https://github.com/source-foundry/Hack][Hack]].  Install Hack via homebrew:

   #+BEGIN_SRC shell
     brew cask install caskroom/fonts/font-hack
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun jwm/font-exists-p (f)
       (and (window-system)
            (member f (font-family-list))))

     (when (window-system)
       (let ((preferred-font
              (cond
               ((and (jwm/font-exists-p "Hack") (jwm/mac-p)) "Hack-14")
               (t "Monaco-12"))))
           (message "setting Jeff preferred font %s" preferred-font)
           (set-frame-font preferred-font t t)))
   #+END_SRC

** Whitespace Mode

   This is another [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#whitespace-mode][copy and paste from Howard]]. It makes it easier to see whitespace when necessary.

   #+BEGIN_SRC emacs-lisp
     (use-package whitespace
       :bind ("C-c T w" . whitespace-mode)
       :init
       (setq whitespace-line-column nil
             whitespace-display-mappings '((space-mark 32 [183] [46])
                                           (newline-mark 10 [9166 10])
                                           (tab-mark 9 [9654 9] [92 9])))
       :config
       (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
       (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
       (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
       :diminish whitespace-mode)
   #+END_SRC

* Key Bindings
** Option and Command Modifier Keys

   Howard maps option and command to different emacs key symbols to allow him that many more possible key
   bindings. Like this:

   #+BEGIN_EXAMPLE
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'super)
   #+END_EXAMPLE

   And I did much the same thing.  However, I think I prefer to keep meta closest to the space bar.

   I leave right-option for the OS X combiner keys, like â from right-option v.

   #+BEGIN_SRC emacs-lisp
     (when (jwm/mac-p)
       (setq mac-command-modifier 'meta)
       (setq mac-option-modifier 'super)
       (setq mac-right-option-modifier 'none))
   #+END_SRC

** Global Key Bindings

   I really like Howards [[file:/t/emacs-configs/howardabrams-dot-files/emacs-client.org::*Key%20Bindings][global key binding approach]], which leverages John Wiegley's [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]] that is part
   of [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][use-package]].

   Recall that there are several /power/ features of =bind-key=, such as rebinding, adding keys to a
   specific map etc. Here are John's [[https://github.com/jwiegley/use-package/blob/master/bind-key.el#L41-L90][pointers]] in the comments of the package.


   #+BEGIN_SRC emacs-lisp
     (bind-keys
      ;; long time bindings I have preferred
      ("C-x y" . revert-buffer)
      ("C-M-g" . goto-line)

      ;; org mode wants these default global bindings set up.
      ("C-c l" . org-store-link)
      ("C-c c" . org-capture)
      ("C-c a" . org-agenda)
      ("C-c b" . org-iswitchb)

      ;; perhaps turn these of when/if I bring in Howards font size functions

      ("s-C-+" . ha/text-scale-frame-increase)
      ("A-C-+" . ha/text-scale-frame-increase)
      ("s-C-=" . ha/text-scale-frame-increase)
      ("A-C-=" . ha/text-scale-frame-increase)
      ("s-C--" . ha/text-scale-frame-decrease)
      ("A-C--" . ha/text-scale-frame-decrease))
   #+END_SRC

** which-key

   I have come to appreciate the exploration of the key maps that [[https://github.com/justbur/emacs-which-key][which-key]] enables.

   Howard extensively [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#displaying-command-sequences][customizes the display of which-key]]. I find that interesting, and maybe something to
   pursue one day.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       :diminish which-key-mode
       :config

       ;; prefer to show the entire command name with no truncation.
       ;;  some of those projectile command names exceed the default value of 27, eg
       ;;  projectile-toggle-between-implementation-and-test
       (setq which-key-max-description-length nil)
       (which-key-mode 1))
   #+END_SRC
